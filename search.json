[
  {
    "objectID": "use-case/usecase2.html",
    "href": "use-case/usecase2.html",
    "title": "Faire une carte avec les DROM rapproch√©s gr√¢ce √† cartiflette",
    "section": "",
    "text": "Important\n\n\n\n\n\nCette page est un work in progress! Des exemples dans d‚Äôautres langages que Python  viendront ult√©rieurement.\nCette page fait partie d‚Äôune s√©rie de tutoriels illustrant les fonctionnalit√©s de cartiflette. Pour retrouver la liste de ceux-ci, c‚Äôest ici\nCe tutoriel vise √† illustrer un cas d‚Äôusage classique de cartiflette : r√©cup√©rer de mani√®re flexible un fonds de carte dont les DROM sont rapproch√©s et o√π on voit un zoom sur l‚ÄôIle de France.\nCe besoin classique est illustr√© en r√©pliquant la carte faite par Jules Grandin pour son podcast ‚ÄúLa Minute Cartographique‚Äù L‚Äôobjectif final de ce tutoriel est de faire cette carte:\nhtml`&lt;div&gt;${carte_interactive_js}&lt;/div&gt;`\nviewof beteview = Inputs.bind(\n    Inputs.radio(\n        new Map([[\"Vaches üêÆ\", \"Bovins\"], [\"Cochons üê∑\", \"Porcins\"], [\"Moutons üêë\", \"Ovins\"]]), {value: \"Bovins\"}\n    ),\n    viewof bete\n)\ncarte_interactive_js = html`\n&lt;div class=\"bouton-cheptel\"&gt;${viewof beteview}&lt;/div&gt;\n&lt;div class=\"titre-carte-cheptel\"&gt;&lt;h3&gt;${title_chosen}&lt;/h3&gt;&lt;/div&gt;\n&lt;div class=\"carte-cheptel\"&gt;${produceMap(cheptel, bete)}&lt;/div&gt;\n&lt;div&gt;${messageBelowMap}&lt;/div&gt;\n`"
  },
  {
    "objectID": "use-case/usecase2.html#la-r√©cup√©ration-des-donn√©es-utilisant-cartiflette",
    "href": "use-case/usecase2.html#la-r√©cup√©ration-des-donn√©es-utilisant-cartiflette",
    "title": "Faire une carte avec les DROM rapproch√©s gr√¢ce √† cartiflette",
    "section": "2.1 La r√©cup√©ration des donn√©es utilisant cartiflette",
    "text": "2.1 La r√©cup√©ration des donn√©es utilisant cartiflette\nNotre objectif est de faire une carte aux caract√©ristiques suivantes:\n\nLes DROM sont rapproch√©s de la France hexagonale en √©tant plac√©s sous celle-ci ;\nUn cartogramme zoom√© de la petite couronne parisienne (d√©partements de la Seine, Hauts-de-Seine, Seine-Saint-Denis et Val de Marne) est disponible en haut √† gauche de celle-ci.\n\nConstruire soi-m√™me ce fonds de carte est fastidieux, comme l‚Äôillustre la partie Comment faire sans cartiflette. Avec cartiflette, ce fonds de carte est pr√©construit √† partir des d√©coupages officiels de l‚ÄôIGN. Il suffit de remplace le niveau FRANCE_ENTIERE en FRANCE_ENTIERE_DROM_RAPPROCHES dans l‚Äôappel √† carti_download.\n\n\n\nListing¬†1: Example d‚Äôutilisation de cartiflette\n\n\n\nfrom cartiflette import carti_download\n\ndepartements = carti_download(\n    values=\"France\",\n    crs=4326,\n    borders=\"DEPARTEMENT\",\n    vectorfile_format=\"geojson\",\n    filter_by=\"FRANCE_ENTIERE_DROM_RAPPROCHES\",\n    source=\"EXPRESS-COG-CARTO-TERRITOIRE\",\n    year=2022,\n)\n\n\n\n\ndepartements est un GeoDataFrame classique proposant les m√©tadonn√©es usuelles de cartiflette avec des g√©ographies modifi√©es pour rapprocher la France des DROM2.\n\ndepartements.boundary.plot(edgecolor = \"black\", linewidth=0.2)"
  },
  {
    "objectID": "use-case/usecase2.html#association-du-fonds-de-carte-cartiflette-au-jeu-de-donn√©es-initial",
    "href": "use-case/usecase2.html#association-du-fonds-de-carte-cartiflette-au-jeu-de-donn√©es-initial",
    "title": "Faire une carte avec les DROM rapproch√©s gr√¢ce √† cartiflette",
    "section": "2.2 Association du fonds de carte cartiflette au jeu de donn√©es initial",
    "text": "2.2 Association du fonds de carte cartiflette au jeu de donn√©es initial\nLa suite du travail n‚Äôest pas intrins√®quement li√© √† cartiflette mais correspond √† de la manipulation de donn√©es spatiales n√©cessaires √† la finalisation de la carte.\nComme nous avons besoin de localiser les d√©comptes d√©partements de b√©tail, nous faisons une jointure spatiale entre notre fonds de carte et nos cheptels\n\ncheptel_geospatial = departements.merge(\n    cheptel[0], left_on=\"INSEE_DEP\", right_on = \"code\"\n)\n\nA partir de l√†, on finalise notre travail sur le jeu de donn√©es pour calculer le ratio entre le nombre de t√™tes et la population:\n\n\nD√©rouler pour voir la finalisation du travail de donn√©es\ndef ratio_cheptel(type_cheptel, data_departement):\n    \"\"\"\n    Fonction permettant de rapporter, pour un type de b√™te donn√©,\n    le nombre de t√™tes par habitant d'un d√©partement \n    \"\"\"\n    data_departement = data_departement.copy()\n    data_departement[\"ratio_\" + type_cheptel] = (\n        data_departement.loc[:, type_cheptel]\n        .div(data_departement[\"POPULATION\"], axis=0)\n    )\n    data_departement[\"more_\" + type_cheptel] = (\n        data_departement[\"ratio_\" + type_cheptel] &gt; 1\n    )\n    return data_departement.loc[:, \"more_\" + type_cheptel]\n\neval_ratio = pd.concat(\n    [ratio_cheptel(bete, cheptel_geospatial) for bete in cheptel[1]],\n    axis = 1\n1)\n\ncheptel_geospatial = pd.concat(\n    [cheptel_geospatial, eval_ratio],\n    axis = 1\n2)\n\n\n\n1\n\nUn DataFrame temporaire permettant de d√©finir, par le biais d‚Äôune boucle, nos indicateurs de population.\n\n2\n\nOn associe ces nouvelles colonnes √† nos donn√©es initiales\n\n\n\n\nLe jeu de donn√©es pr√™t √† l‚Äôemploi prend la forme suivante:\n\ncheptel_geospatial.head(2)\n\n\n\n\n\n\n\n\nINSEE_DEP\nPAYS\nLIBELLE_DEPARTEMENT\nPOPULATION\nSOURCE\ngeometry\ncode\ndepartement\nBovins\nPorcins\nOvins\nCaprins\nVolailles\nmore_Bovins\nmore_Porcins\nmore_Ovins\nmore_Caprins\nmore_Volailles\n\n\n\n\n0\n43\nFrance\nHaute-Loire\n227570\nIGN:EXPRESS-COG-CARTO-TERRITOIRE\nPOLYGON ((3.89745 45.35699, 3.89731 45.35658, ...\n43\nHaute-Loire\n209400.0\n61000.0\n146500.0\n14800.0\nNaN\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\n1\n65\nFrance\nHautes-Pyr√©n√©es\n229567\nIGN:EXPRESS-COG-CARTO-TERRITOIRE\nMULTIPOLYGON (((-0.09705 43.5822, -0.09642 43....\n65\nHautes-Pyr√©n√©es\n99200.0\n44400.0\n128800.0\n5300.0\nNaN\nFalse\nFalse\nFalse\nFalse\nFalse"
  },
  {
    "objectID": "use-case/usecase2.html#production-de-la-carte-interactive",
    "href": "use-case/usecase2.html#production-de-la-carte-interactive",
    "title": "Faire une carte avec les DROM rapproch√©s gr√¢ce √† cartiflette",
    "section": "2.3 Production de la carte interactive",
    "text": "2.3 Production de la carte interactive\nOn peut maintenant se concentrer sur la carte. Pour la rendre plus informative, il est utile de contextualiser les d√©partements en permettant aux spectateurs de la carte de conna√Ætre le nom des d√©partements ayant un cheptel plus important que sa population.\nCela peut √™tre fait comme sur la carte d‚Äôorigine de Jules Grandin en inscrivant les noms des d√©partements concern√©s sur celle-ci. Cela n√©cessite tout de m√™me un travail manuel important pour qui n‚Äôutilise pas une interface comme QGIS.\nIl est plus simple, pour les utilisateurs de logiciels comme Python, R ou Javascript de produire une carte interactive qui permet d‚Äôafficher des valeurs lorsqu‚Äôon passe la souris dessus. Il existe plusieurs √©cosyst√®mes pour faire cela, plus ou moins directement reli√©s √† Javascript, le langage consacr√© pour ce type d‚Äôapplications r√©actives.\nLes exemples ci-dessous proposent un code en Python pour faire une carte interactive par le biais de la librairie Folium. Cette mani√®re de proc√©der √©tant un peu fastidieuse, car Folium n‚Äôest pas initialement con√ßu pour ce type de cartes, il est recommand√© de privil√©gier la solution Observable qui est un framework Javascript ressemblant beaucoup √† Python mais plus adapt√© que ce dernier pour la dataviz.\nEn premier lieu, on d√©finit une fonction g√©n√©rique qui permet de construire, pour un type de cheptel donn√©, la carte qui sera cr√©√©e:\n\n\nD√©finition d‚Äôune fonction g√©n√©rique pour cr√©er la carte\nimport folium\nimport branca\n\npalettes = {\n    \"Bovins\": {True: \"#f9b439\", False: \"#d8d4d3\"},\n    \"Porcins\": {True: \"#ec6569\", False: \"#d8d4d3\"},\n    \"Ovins\": {True: \"#5eb04e\", False: \"#d8d4d3\"},\n    \"Caprins\": {True: \"#5eb04e\", False: \"#d8d4d3\"}\n}\n\n# Function to apply color based on the 'more_XXXXX' values\ndef style_function(feature, bete):\n    more_bovins = feature['properties'][f'more_{bete}']\n    return {\n        'fillColor': palettes[bete][more_bovins],\n        'color': 'black',\n        'weight': 1,\n        'fillOpacity': 0.7,\n    }\n\n\ndef map_repartition(cheptel_geospatial, bete):\n1    white_tile = branca.utilities.image_to_url([[1, 1], [1, 1]])\n\n    # Initialize a folium map\n    m = folium.Map(\n        location=[\n            cheptel_geospatial.geometry.centroid.y.mean(), cheptel_geospatial.geometry.centroid.x.mean()\n        ],\n        zoom_start=5,\n        tiles=white_tile, attr=\"white tile\"\n    )\n\n\n    # Add GeoJson layer to the map\n    folium.GeoJson(\n        cheptel_geospatial,\n        style_function=lambda x: style_function(x, bete),\n        tooltip=folium.GeoJsonTooltip(\n            fields=['LIBELLE_DEPARTEMENT', 'POPULATION', bete],\n            aliases=['Department:', 'Population:', f'{bete}:'],\n            localize=True\n        )\n    ).add_to(m)\n\n    return m\n\n\n\n1\n\nFolium est une librairie qui est pens√©e, avant tout, pour proposer un fonds de carte type OpenStreetMap en arri√®re-plan. Celui-ci ne nous int√©resse pas ici car nous avons cr√©√© des √©l√©ments sans contrepartie sur la Terre (les DROM sous la France, le zoom de l‚ÄôIle de France au nord ouest de la Normandie). Nous cr√©ons donc un fond blanc qui est utilis√© de mani√®re d√©tourn√©e par Folium.\n\n\n\n\nPour cr√©er celles-ci, il suffit d√®s lors d‚Äôappliquer la fonction sur le type d‚Äô√©levage d√©sir√©:\n\n\nVisualiser par le biais de Folium\nmap_repartition(cheptel_geospatial, \"Bovins\")\nmap_repartition(cheptel_geospatial, \"Porcins\")\nmap_repartition(cheptel_geospatial, \"Ovins\")\n\n\nN√©anmoins, ce n‚Äôest pas la m√©thode adopt√©e pour cr√©er les cartes ci-dessous:\n\nhtml`&lt;div&gt;${carte_interactive_js2}&lt;/div&gt;`\n\n\n\n\n\n\nPour cela, il vaut mieux utiliser Javascript par le biais d‚ÄôObservable dont le code est disponible dans la boite d√©roulable ci-dessous:\n\n\n\n\n\n\nComment faire avec Javascript ?\n\n\n\n\n\nCe tutoriel utilise le framework Observable par le biais de Quarto, l‚Äôoutil de construction de site web d√©velopp√© par Posit. Le code source de cette page est disponible ici3.\nPour se simplifier la t√¢che, on va cr√©er une fonction graphique qui prend en input un Array et un type d‚Äô√©levage (par exemple ‚ÄúBovins‚Äù) et renvoie une carte:\n\nimport {addTooltips} from \"@mkfreeman/plot-tooltip\"\n\nfunction produceMap(cheptel, bete){\n    const carte = addTooltips(\n        Plot.plot({ \n            marginLeft: 0,\n            marginRight: 0,\n            width: 400,\n            height: 400,  \n            color: {\n            legend: true,\n            value: [\n                labels_widgets.filter(d =&gt; d.type == bete)[0].true,\n                labels_widgets.filter(d =&gt; d.type == bete)[0].false        \n            ],\n            range: [\n                palettes.filter(d =&gt; d.name == bete)[0].trueColor,\n                palettes.filter(d =&gt; d.name == bete)[0].falseColor\n            ],\n            label: \"Alors ?\"\n            },\n            y: {axis: null},\n            x: {axis: null},\n            marks: [\n            Plot.geo(cheptel, {\n                fill: (d) =&gt; labels_widgets.filter(d =&gt; d.type == bete)[0][d.properties[bete] &gt; d.properties.POPULATION],\n                sort: {\n                color: \"fill\",\n                reverse: true\n                },\n                title: (d) =&gt; `${d.properties.LIBELLE_DEPARTEMENT} (${d.properties.INSEE_DEP}) \\nCheptel: ${d.properties[bete]} \\nPopulation: ${d.properties.POPULATION}  \\n Ratio: ${(d.properties[bete]/d.properties.POPULATION).toLocaleString(undefined, {maximumSignificantDigits: 2})}`,\n            })\n            ]\n        })\n    )\n    return carte\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCelle-ci utilise un certain nombre d‚Äôingr√©dients. En premier lieu, des arrays permettant de changer les valeurs affich√©es en fonction de la valeur du widget s√©lectionn√© :\n\nlabels_widgets = [\n    {type: \"Bovins\", true: \"Plus de vaches üêÆ\", false: \"Plus d'habitants\"},\n    {type: \"Porcins\", true: \"Plus de cochons üê∑\", false: \"Plus d'habitants\"},\n    {type: \"Ovins\", true: \"Plus de moutons üêë\", false: \"Plus d'habitants\"},\n    {type: \"Caprins\", true: \"Plus de ch√®vres üêê\", false: \"Plus d'habitants\"}\n]\ntitle = [\n    {type: \"Bovins\", title: \"Plus de vaches üêÆ ou d'habitants ?\"},\n    {type: \"Porcins\", title: \"Plus de cochons üê∑ ou d'habitants ?\"},\n    {type: \"Ovins\", title: \"Plus de moutons üêë ou d'habitants ?\"},\n    {type: \"Caprins\", title: \"Plus de ch√®vres üêê ou d'habitants ?\"}\n]\npalettes = [\n    {\n        name: \"Bovins\",\n        trueColor: \"#f9b439\",\n        falseColor: \"#d8d4d3\"\n    },\n    {\n        name: \"Porcins\",\n        trueColor: \"#ec6569\",\n        falseColor: \"#d8d4d3\"\n    },\n    {\n        name: \"Ovins\",\n        trueColor: \"#5eb04e\",\n        falseColor: \"#d8d4d3\"\n    },\n    {\n        name: \"Caprins\",\n        trueColor: \"#00b5ed\",\n        falseColor: \"#d8d4d3\"\n    }\n]\n\ntitle_chosen = title.filter(d =&gt; d.type == bete)[0].title\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmobileCheck = function() {\n  let check = false;\n  (function(a){if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);\n  return check;\n};\n\n\n\n\n\n\n\nmessageBelowMap = {\n    const isMobile = mobileCheck() ;\n    let messageBelowMap = `&lt;div&gt;&lt;i&gt;Passer la souris sur la carte pour afficher des informations sur chaque d√©partement&lt;/i&gt;&lt;/div&gt;`\n    if (isMobile) {\n        let messageBelowMap = `&lt;div&gt;&lt;i&gt;Cliquer sur la carte pour afficher des informations sur chaque d√©partement&lt;/i&gt;&lt;/div&gt;`\n    }\n\n    return messageBelowMap\n}\n\n\n\n\n\n\n\ncarte_interactive_js2 = html`\n&lt;div class=\"bouton-cheptel\"&gt;${viewof bete}&lt;/div&gt;\n&lt;div class=\"titre-carte-cheptel\"&gt;&lt;h3&gt;${title_chosen}&lt;/h3&gt;&lt;/div&gt;\n&lt;div class=\"carte-cheptel\"&gt;${produceMap(cheptel, bete)}&lt;/div&gt;\n&lt;div class=\"message-below-map\"&gt;${messageBelowMap}&lt;/div&gt;\n`\n\n\n\n\n\n\nCe widget est un radio button qui peut √™tre cr√©√© par le code suivant, permettant √† la fois d‚Äôexposer celui-ci sur l‚Äôinterface et de stocker sa valeur active dans la variable bete\n\nviewof bete = Inputs.radio(\n    new Map([[\"Vaches üêÆ\", \"Bovins\"], [\"Cochons üê∑\", \"Porcins\"], [\"Moutons üêë\", \"Ovins\"]]), {value: \"Bovins\"}\n)\n\n\n\n\n\n\nIl ne manque qu‚Äô√† importer les donn√©es n√©cessaires √† la carte dans Javascript. La fonction ojs_define permettant la transmission d‚Äôun objet Python √† R ne fonctionnant pas pour un GeoPandas, le plus simple est de cr√©er un GeoJSON en Python :\n\ncheptel_geospatial.to_file(\n    \"cheptel.json\", driver=\"GeoJSON\"\n)\n\nIl suffit ensuite d‚Äôimporter celui-ci avec la fonction FileAttachment d‚ÄôObservable\n\ncheptel = FileAttachment(\"cheptel.json\").json()"
  },
  {
    "objectID": "use-case/usecase2.html#volume-de-donn√©es-t√©l√©charg√©es",
    "href": "use-case/usecase2.html#volume-de-donn√©es-t√©l√©charg√©es",
    "title": "Faire une carte avec les DROM rapproch√©s gr√¢ce √† cartiflette",
    "section": "4.1 Volume de donn√©es t√©l√©charg√©es",
    "text": "4.1 Volume de donn√©es t√©l√©charg√©es\n\n\nFonction convert_size pour avoir les tailles de fichiers dans un format lisible par un humain\n# Convert to a human-readable format (e.g., MB, GB)\ndef convert_size(size_bytes):\n    if size_bytes == 0:\n        return \"0B\"\n    size_name = (\"B\", \"KB\", \"MB\", \"GB\", \"TB\")\n    i = int(math.floor(math.log(size_bytes, 1024)))\n    p = math.pow(1024, i)\n    s = round(size_bytes / p, 2)\n    return f\"{s} {size_name[i]}\"\n\n\n\n\nEvaluation de la taille des fichiers issus d‚ÄôAdminExpress\nimport math\nimport os\nfrom pathlib import Path\n\n# Path to the zipped file\nzipped_file = \"ADMIN-EXPRESS-COG-CARTO_3-1__SHP_WGS84G_FRA_2022-04-15.7z\"\n\n# Get the size of the zipped file in bytes\nzipped_size = os.path.getsize(zipped_file)\n\n# Path to the directory containing unzipped files\nunzipped_dir = \"./extracted_files\"\n\nroot_directory = Path(unzipped_dir)\nsize_dir = sum(f.stat().st_size for f in root_directory.glob('**/*') if f.is_file())\n\npoids_archive_compressee = convert_size(zipped_size)\npoids_archive_decompressee = convert_size(size_dir)\n\n\n\n\nEvaluation de la taille des m√™mes donn√©es issues de cartiflette\nwritedir = \"cartiflette-data/usecase2\"\nos.makedirs(writedir, exist_ok=True)\ndepartements.to_file(\n    f\"{writedir}/contours.shp\"\n1)\n\npoids_archive_cartiflette_bytes = os.path.getsize(f\"{writedir}/contours.shp\")\npoids_archive_cartiflette = convert_size(\n    poids_archive_cartiflette_bytes\n)\n\n\n\n1\n\nOn cr√©e un shapefile avec le GeoDataFrame obtenu depuis cartiflette afin d‚Äôavoir une comparaison honn√™te avec le fonds de carte issu du site de l‚ÄôIGN.\n\n\n\n\nLa premi√®re base de comparaison possible est la taille sur disque des fonds de carte r√©cup√©r√©s par cartiflette ou sans passer par ce package. Le code ci-dessus ‚òùÔ∏è permet de construire les statistiques suivantes:\n\nLes donn√©es cartiflette repr√©senteraient 11.78 MB si elles √©taient stock√©es sur disque.\nSans passer par cartiflette, on a besoin de 240.67 MB pour stocker les fonds de carte d√©compress√©s auxquels il faut ajouter 142.86 MB pour stocker l‚Äôarchive compress√©e.\n\nAutrement dit, les donn√©es r√©cup√©r√©es sans cartiflette repr√©sentent 33 fois le volume de celles exclusivement n√©cessaires pour cette carte.\nL‚Äôarborescence du dossier d√©compress√© est √©galement assez cons√©quente: nous avons 68 fichiers. L‚Äôarborescence compl√®te obtenue sans cartiflette est disponible ci-dessous. Avec cartiflette aucun fichier n‚Äôest √©crit sur disque, tout est directement accessible dans la session Python.\n\n\nArborescence compl√®te\n\n\n\nextracted_files/\n‚îî‚îÄ‚îÄ ADMIN-EXPRESS-COG-CARTO_3-1__SHP_WGS84G_FRA_2022-04-15/\n    ‚îú‚îÄ‚îÄ ADMIN-EXPRESS-COG-CARTO/\n    ‚îÇ   ‚îú‚îÄ‚îÄ 1_DONNEES_LIVRAISON_2022-04-15/\n    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ADECOGC_3-1_SHP_WGS84G_FRA/\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ARRONDISSEMENT.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ARRONDISSEMENT.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ARRONDISSEMENT.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ARRONDISSEMENT.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ARRONDISSEMENT.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ARRONDISSEMENT_MUNICIPAL.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ARRONDISSEMENT_MUNICIPAL.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ARRONDISSEMENT_MUNICIPAL.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ARRONDISSEMENT_MUNICIPAL.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ARRONDISSEMENT_MUNICIPAL.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CANTON.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CANTON.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CANTON.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CANTON.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CANTON.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_ARRONDISSEMENT_MUNICIPAL.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_ARRONDISSEMENT_MUNICIPAL.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_ARRONDISSEMENT_MUNICIPAL.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_ARRONDISSEMENT_MUNICIPAL.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_ARRONDISSEMENT_MUNICIPAL.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_COMMUNE.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_COMMUNE.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_COMMUNE.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_COMMUNE.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_COMMUNE.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_COMMUNE_ASSOCIEE_OU_DELEGUEE.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_COMMUNE_ASSOCIEE_OU_DELEGUEE.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_COMMUNE_ASSOCIEE_OU_DELEGUEE.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_COMMUNE_ASSOCIEE_OU_DELEGUEE.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_COMMUNE_ASSOCIEE_OU_DELEGUEE.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COLLECTIVITE_TERRITORIALE.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COLLECTIVITE_TERRITORIALE.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COLLECTIVITE_TERRITORIALE.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COLLECTIVITE_TERRITORIALE.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COLLECTIVITE_TERRITORIALE.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COMMUNE.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COMMUNE.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COMMUNE.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COMMUNE.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COMMUNE.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COMMUNE_ASSOCIEE_OU_DELEGUEE.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COMMUNE_ASSOCIEE_OU_DELEGUEE.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COMMUNE_ASSOCIEE_OU_DELEGUEE.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COMMUNE_ASSOCIEE_OU_DELEGUEE.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COMMUNE_ASSOCIEE_OU_DELEGUEE.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DEPARTEMENT.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DEPARTEMENT.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DEPARTEMENT.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DEPARTEMENT.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DEPARTEMENT.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EPCI.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EPCI.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EPCI.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EPCI.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EPCI.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ REGION.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ REGION.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ REGION.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ REGION.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ REGION.shx\n    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ADECOGC_3-1_SHP_WGS84G_FRA.md5\n    ‚îÇ   ‚îú‚îÄ‚îÄ 1_DONNEES_LIVRAISON_2022-04-15.md5\n    ‚îÇ   ‚îú‚îÄ‚îÄ 2_METADONNEES_LIVRAISON_2022-04-15/\n    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ADECOGC_3-1_SHP_WGS84G_FRA/\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ IGNF_ADECOGC_3-1_SHP_WGS84G_FRA.html\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ IGNF_ADECOGC_3-1_SHP_WGS84G_FRA.xml\n    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ADECOGC_3-1_SHP_WGS84G_FRA.md5\n    ‚îÇ   ‚îú‚îÄ‚îÄ 2_METADONNEES_LIVRAISON_2022-04-15.md5\n    ‚îÇ   ‚îî‚îÄ‚îÄ LISEZ-MOI.pdf\n    ‚îî‚îÄ‚îÄ ADMIN-EXPRESS-COG-CARTO.md5"
  },
  {
    "objectID": "use-case/usecase2.html#nombre-de-lignes-de-code",
    "href": "use-case/usecase2.html#nombre-de-lignes-de-code",
    "title": "Faire une carte avec les DROM rapproch√©s gr√¢ce √† cartiflette",
    "section": "4.2 Nombre de lignes de code",
    "text": "4.2 Nombre de lignes de code\n\nmd`La r√©cup√©ration des donn√©es avec \\`cartiflette\\` ne demande que __${nlines_cartiflette} lignes de code__ contre __${nlines_no_cartiflette} sans \\`cartiflette\\`__`\n\n\n\n\n\n\nEn ce qui concerne le temps de d√©veloppement de ce code, on est sur quelques secondes pour le code avec cartiflette en utilisant la documentation interactive d‚Äôexemples contre plusieurs dizaines de minutes pour le code sans cartiflette."
  },
  {
    "objectID": "use-case/usecase2.html#temps-de-traitement",
    "href": "use-case/usecase2.html#temps-de-traitement",
    "title": "Faire une carte avec les DROM rapproch√©s gr√¢ce √† cartiflette",
    "section": "4.3 Temps de traitement",
    "text": "4.3 Temps de traitement\nLe code cartiflette permet de r√©cup√©rer les √©l√©ments contextuels n√©cessaires en 12 secondes. Sans cartiflette, il faut 15 secondes. Sans cartiflette, soit un rapport de 1 √† 1 pour cette t√¢che.\n\n\nlabels = [\n    'lst-example-download-adminexpress',\n    'lst-example-unzip-adminexpress',\n    'lst-example-split-adminexpress-1',\n    'lst-example-split-adminexpress-2',\n    'lst-example-split-adminexpress-3',\n    'lst-example-split-adminexpress-4',\n    'lst-example-split-adminexpress-5',\n    'lst-example-merge-adminexpres'\n]\nlabels_cartiflette = [\n    'lst-cartiflette-example'\n]\nnlines_no_cartiflette = d3.sum(nrows_no_cartiflette)\nnlines_cartiflette = d3.sum(nrows_cartiflette)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction extractLineNumbers(label) {\n    const selector = `[aria-describedby^=\"${label}\"]`;\n    const blocks = document.querySelectorAll(selector);\n\n    let lineNumbers = [];\n\n    blocks.forEach(block =&gt; {\n        // Search for ids matching \"annotated-cell-XX-N\"\n        const annotatedCells = block.querySelectorAll('[id^=\"annotated-cell-\"]');\n        annotatedCells.forEach(cell =&gt; {\n            const match = cell.id.match(/annotated-cell-\\d+-(\\d+)/);\n            if (match) {\n                lineNumbers.push(parseInt(match[1], 10));\n            }\n        });\n\n        // Search for ids matching \"cbXX-N\"\n        const cbCells = block.querySelectorAll('[id^=\"cb\"]');\n        cbCells.forEach(cell =&gt; {\n            const match = cell.id.match(/cb\\d+-(\\d+)/);\n            if (match) {\n                lineNumbers.push(parseInt(match[1], 10));\n            }\n        });\n    });\n\n    return lineNumbers;\n}\n\nfunction getMaxLineNumber(label) {\n    const lineNumbers = extractLineNumbers(label);\n    return Math.max(...lineNumbers);\n}\n\n// Iterate over labels to get max line numbers\nnrows_no_cartiflette = labels.map(label =&gt; {\n    const maxLineNumber = getMaxLineNumber(label);\n    return maxLineNumber;\n})\n\nnrows_cartiflette = labels_cartiflette.map(label =&gt; {\n    const maxLineNumber = getMaxLineNumber(label);\n    return maxLineNumber;\n})"
  },
  {
    "objectID": "use-case/usecase2.html#footnotes",
    "href": "use-case/usecase2.html#footnotes",
    "title": "Faire une carte avec les DROM rapproch√©s gr√¢ce √† cartiflette",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nDans l‚Äôid√©al, nous utiliserions les populations l√©gales mesur√©es par l‚ÄôInsee. Les fonds de carte de l‚ÄôIGN proposent n√©anmoins d√©j√† une variable POPULATION qui est celle qui sera utilis√©e ici. Des travaux ult√©rieurs sur cartiflette viseront √† remplacer cette variable par les populations l√©gales pour assurer que les m√©tadonn√©es utilis√©es par les fonds de carte correspondent, au m√™me titre que les d√©coupages g√©om√©triques, aux donn√©es officielles.‚Ü©Ô∏é\nCe fonds de carte est en g√©om√©trie WGS84 (CRS: 4326). Ce n‚Äôest n√©anmoins qu‚Äôune apparence car les g√©om√©tries n√©cessaires pour repr√©senter les DROM et l‚ÄôIle de France sur cette carte ne correspondent √† aucune r√©alit√© terrestre. Il ne faut donc consid√©rer ce fonds de carte que pour la cartographie finale, pas la manipulation de donn√©es g√©ographique (par exemple pour un calcul de distance terrestre). Pour celles-ci, le fonds de carte normal √† utiliser est FRANCE_ENTIERE.‚Ü©Ô∏é\nJavascript est un langage asynchrone donc l‚Äôex√©cution du code ne d√©pend pas de l‚Äôordre de d√©finition des objets dans le code, contrairement √† Python. Il est donc normal de voir dans les codes ci-dessous une utilisation d‚Äôune variable, par exemple bete, qui n‚Äôest pas d√©finie en amont. Celle-ci peut √™tre d√©finie plus loin dans le code, c‚Äôest Javascript qui va r√©ordonner de mani√®re logique l‚Äôex√©cution du code.‚Ü©Ô∏é\nL‚Äôemplacement des DROM produit par ce code Python est diff√©rent de celui du fond de carte de cartiflette. Ce dernier est g√©n√©r√© gr√¢ce √† mapshaper en s‚Äôinspirant d‚Äôun tutoriel d‚ÄôEric Mauvi√®re. Celui propos√© ici en Python est inspir√© d‚Äôun code R d‚Äôun √©minent coll√®gue de l‚ÄôInsee, Lionel Cacheux.‚Ü©Ô∏é"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Documentation projet cartiflette üßÄ",
    "section": "",
    "text": "data_france = get_france(selectedlevel, \"topojson\", year, drom_rapproches, simplification_percent)\n\n\n\n\n\n\n\nattributes_map_france = topojson\n    .feature(data_france, data_france.objects.France)\n    .features\n    .map(d=&gt;d.properties)\n\n\n\n\n\n\n\nbutton_france = html`\n  ${download_button(\n    create_url_france(selectedlevel, format, year, drom_rapproches, simplification_percent)\n  )}\n`\n\n\n\n\n\n\n\nbutton_departements = html`\n  ${download_button(\n    create_url_departement(selected_departements, selectedlevel, format, year, simplification_percent)\n  )}\n`\n\n\n\n\n\n\n\ndepartement_shape = get_departement(\n      departement,\n      arrondissement ? \"COMMUNE_ARRONDISSEMENT\" : \"COMMUNE\",\n      \"topojson\",\n      year\n    )\n\n\n\n\n\n\n\n\ndata_multiple_departement_combined = {\n    if (selected_departements.length == 1){\n        return data_multiple_departement\n    }\n    return mergeGeoJSONs(data_multiple_departement)\n}\n\n\n\n\n\n\n\nmap_multiple_departement = topohelper.fromGeojson(\n    data_multiple_departement_combined,\n    {deep: true}\n    )\n    .project({ proj: l93 })\n    .view({\n        tooltip: true,\n        zoom: true,\n        size: [\n            availableWidth &gt; smallScreen ? availableWidth*0.4 : availableWidth*0.95, availableHeight * 0.6\n    ]})\n\n\n\n\n\n\n\nattributes_map_departement = data_multiple_departement_combined.features.map(d =&gt; d.properties)\n\n\n\n\n\n\n\nviewof table_attributes_map_department = Inputs.table(\n    attributes_map_departement\n)\n\n\n\n\n\n\n\ndata_multiple_departement = {\n\n    let topos ;\n    \n    if (selected_departements.length == 1){\n        topos = get_departement(\n            selected_departements,\n            arrondissement ? \"COMMUNE_ARRONDISSEMENT\" : \"COMMUNE\",\n            \"geojson\",\n            year,\n            simplification_percent\n        )\n        return topos\n    }\n\n    topos = get_multiple_departement(\n            selected_departements,\n            arrondissement ? \"COMMUNE_ARRONDISSEMENT\" : \"COMMUNE\",\n            \"geojson\",\n            year,\n            simplification_percent\n        )\n    \n    return topos\n}\n\n\n\n\n\n\n\n\ndb = DuckDBClient.of({})\n\n\n\n\n\n\n\nannotationsSources = await db.query(\n  \"SELECT * FROM read_csv_auto('https://minio.lab.sspcloud.fr/projet-cartiflette/documentation-website/sources_annotations.csv', header=true) \"\n)\n\n\n\n\n\n\n\n// Function to merge multiple GeoJSON FeatureCollections\nfunction mergeGeoJSONs(geojsonList) {\n    // Initialize an empty FeatureCollection\n    const mergedGeoJSON = {\n        type: \"FeatureCollection\",\n        features: []\n    };\n\n    // Loop through all GeoJSON objects in the list\n    geojsonList.forEach(geojson =&gt; {\n        if (geojson.type === \"Feature\") {\n            // If it's a Feature, add directly to the features array\n            mergedGeoJSON.features.push(geojson);\n        } else if (geojson.type === \"FeatureCollection\") {\n            // If it's a FeatureCollection, add all its features to the features array\n            mergedGeoJSON.features = mergedGeoJSON.features.concat(geojson.features);\n        }\n    });\n\n    return mergedGeoJSON;\n}\n\n\n\n\n\n\n\navailableHeight = window.innerHeight\nscreenHeight = 0.9*(availableHeight - document.getElementById(\"quarto-header\").offsetHeight)\navailableWidth = window.innerWidth\nmapWidth = (width &gt; 400) ? 0.4*width : 0.95*width \nmapHeight = (width &gt; 400) ? 0.85*screenHeight : 0.5*screenHeight\nsmallScreen = 500\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Projection Lambert 93 (EPSG: 2154)\nl93 = \"+proj=lcc +lat_0=46.5 +lon_0=3 +lat_1=49 +lat_2=44 +x_0=700000 +y_0=6600000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs +type=crs\"\n\n\n\n\n\n\n\ntopohelper = import(\"https://cdn.jsdelivr.net/npm/topohelper@0.4.3/+esm\")\n\n\n\n\n\n\n\n\nimport {download_vectorfile} from \"@linogaliana/cartiflette-js\"\n\n\n\n\n\n\n\nimport {\n  button, url_file_available,\n  get_france, get_departement, liste_departements,\n  get_multiple_departement, create_url_departement, create_url_france,\n  to_single_geojson} from \"@linogaliana/cartiflette-js\"\n\n\n\n\n\n\n\nimport {create_projection2154, map_multiple_2154, map_multiple_4326, make_map, print_program_departement_single} from \"@linogaliana/cartiflette-doc-utils\"\n\n\n\n\n\n\n\nfunction download_button(url) {\n  return `\n    &lt;form method=\"get\" action=\"${url}\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;\n      &lt;button class=\"btn btn-download\" type=\"submit\"&gt;\n        &lt;i class=\"fa-solid fa-download\"&gt;&lt;/i&gt; Download !\n      &lt;/button&gt;\n    &lt;/form&gt;\n  `;\n}\n\n\n\n\n\n\n\nimport {multiAutoSelect} from \"@linogaliana/multi-auto-select\"\n\n\n\n\n\n\n\nviewof choice_print_map_france  = Inputs.bind(\n    Inputs.radio(['Carte', 'M√©tadonn√©es associ√©es'], {value: \"Carte\"}),\n    viewof choice_print_map_departement\n)\n\n\n\n\n\n\n\nviewof year = Inputs.select([\"2022\",], {label: \"Ann√©e de la g√©ographie de r√©f√©rence\"})\n\n\n\n\n\n\n\nviewof drom_rapproches = Inputs.toggle({label: \"Rapprocher les DROM ?\", value: true})\n\n\n\n\n\n\n\nviewof selectedlevel = Inputs.select(['DEPARTEMENT', 'REGION', 'BASSIN_VIE', 'AIRE_ATTRACTION_VILLES'], {label: \"Zonage d√©sir√©:\"})\n\n\n\n\n\n\n\nviewof format = Inputs.select(\n  [\"topojson\", \"geojson\"],\n  {label: \"Format d√©sir√©:\"})\n\n\n\n\n\n\n\nviewof simplification_percent = Inputs.range([0, 50], {step: 50, value: 50, label: \"Degr√© de simplification (%)\"})\n\n\n\n\n\n\n\n\nviewof arrondissement = Inputs.toggle({label: \"Arrondissement dans les grandes villes ?\", value: true})\nlevel_arrondissement = arrondissement ? \"COMMUNE_ARRONDISSEMENT\" : \"COMMUNE\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nviewof departement = Inputs.select(liste_departements, {label: \"D√©partement √† repr√©senter\"})\n\n\n\n\n\n\n\nviewof simplification_percent_departement = Inputs.bind(\n  Inputs.range([0, 50], {step: 50, value: 50, label: \"Degr√© de simplification (%)\"}),\n  viewof simplification_percent\n  )\n\n\n\n\n\n\n\nviewof langage_requete = Inputs.radio(\n  [\"Python\", \"Javascript\" ,\"R\"], {label: \"Langage de programmation pour les exemples de code\"},\n  {value: null, format: x =&gt; x ?? \"Python\"}\n)\n\n\n\n\n\n\n\nviewof langage_requete_departements = Inputs.radio(\n  [\"Python\", \"Javascript\" ,\"R\"], {label: \"Langage de programmation pour les exemples de code\"},\n  {value: null, format: x =&gt; x ?? \"Python\"}\n)\n\n\n\n\n\n\n\n\nviewof selected_departements = multiAutoSelect({\n    options: liste_departements,\n    placeholder: \"Liste des d√©partements\",\n    value: [\"75\", \"92\", \"93\", \"94\"]\n})\n\n\n\n\n\n\n\nlanguage_emprise = Inputs.bind(\n    Inputs.radio(\n        [\"Python\", \"Javascript\" ,\"R\"], {label: \"Langage de programmation pour les exemples de code\"},\n        {value: null, format: x =&gt; x ?? \"Python\"}\n    ),\n    viewof langage_requete\n)\n\n\n\n\n\n\n\nlanguage_emprise_departements = Inputs.bind(\n    Inputs.radio(\n        [\"Python\", \"Javascript\" ,\"R\"], {label: \"Langage de programmation pour les exemples de code\"},\n        {value: null, format: x =&gt; x ?? \"Python\"}\n    ),\n    viewof langage_requete_departements\n)\n\n\n\n\n\n\n\nyear_emprise = Inputs.bind(\n    Inputs.select(\n        [\"2022\",], {label: \"Ann√©e de la g√©ographie de r√©f√©rence\"}\n    ),\n    viewof year\n)\n\n\n\n\n\n\n\nformat_emprise = Inputs.bind(\n    Inputs.select(\n        [\"topojson\", \"geojson\"],{label: \"Format d√©sir√©:\"}\n    ),\n    viewof format\n)\n\n\n\n\n\n\n\nsimplification_percent_emprise = Inputs.bind(\n    Inputs.range(\n        [0, 50], {step: 50, value: 50, label: \"Degr√© de simplification (%)\"}\n    ),\n    viewof simplification_percent\n)\n\n\n\n\n\n\n\n\nlangage = langage_requete == null ? \"Python\" : langage_requete\n\n\n\n\n\n\n\nlangage_departements = langage_requete_departements == null ? \"Python\" : langage_requete_departements\n\n\n\n\n\n\n\nlogo = ({\n  \"python\": `${fab`python`}`,\n  \"javascript\": `${fab`js`}`,\n  \"r\": `${fab`r-project`}`\n})\n\n\n\n\n\n\n\nimport { style as faStyle, fa, fab, fas } from \"@airbornemint/fontawesome\"\n\n\n\n\n\n\n\n\n// Function to display the code bloc to use Cartiflette for whole France\nfunction print_program_france(langage, selectedlevel, format, year, rapproche_drom, simplification){\n    const filter_by = rapproche_drom ? \"FRANCE_ENTIERE_DROM_RAPPROCHES\" : \"FRANCE_ENTIERE\"\n    if (langage == \"Python\"){\n        return md`\n        from cartiflette import carti_download\n        shp_communes = carti_download(\n            values = [\"France\"],\n            crs = 4326,\n            borders = \"${selectedlevel}\",\n            vectorfile_format=\"${format}\",\n            simplification=${simplification},\n            filter_by=\"${filter_by}\",\n            source=\"EXPRESS-COG-CARTO-TERRITOIRE\",\n            year=${year})\n        `\n    } else{\n        return md`\n        import {carti_download} from \"@linogaliana/cartiflette-js\"\n        carti_download({\n            value: \"France\",\n            crs: 4326,\n            borders: \"${selectedlevel}\",\n            vectorfile_format: \"${format}\",\n            simplification=${simplification},\n            filter_by: ${filter_by}\",\n            source: \"EXPRESS-COG-CARTO-TERRITOIRE\",\n            year:${year}\n        })\n        `\n    }\n}\n\n\n\n\n\n\n\n\nfunction annotateFields(x, annotationsSources) {\n    // Extract the keys from the input object\n    const fields = Object.keys(x[0]);\n\n    // Create a new object with annotated values for each field\n    const annotatedObject = {};\n    fields.forEach(field =&gt; {\n        annotatedObject[field] = annotateColumn(field, annotationsSources);\n    });\n\n    // Return an array where the first element is the annotated object and the second is the original object\n    return [annotatedObject, ...x];\n}\n\n\n\n\n\n\n\nfunction annotateColumn(columnName, annotationsSources) {\n\n  const sourceData = annotationsSources.filter(d =&gt; d.variable == columnName)[0];\n  const sourceSelected = sourceData['source'];\n  const url = sourceData['url'];\n  const annotation = sourceData['note'];\n\n  // Generate the HTML with a colored footnote, and add an anchor tag to link to the source documentation\n  return html`\n    &lt;span style=\"font-weight: bold;\"&gt;&lt;span style=\"background-color: #ffcc00; color: black; padding: 2px 5px; border-radius: 3px; cursor: pointer;\"&gt;\n    &lt;a href=\"${url}\" target=\"_blank\" style=\"color: black; text-decoration: none;\" title=\"${sourceSelected} - ${annotation}\"&gt;\n      ${annotation}\n    &lt;/a&gt;\n  &lt;/span&gt;&lt;/span&gt;\n  `;\n}\n\n\n\n\n\n\n\n\n\nhtml`&lt;div&gt;${grid}&lt;/div&gt;`\n\n\n\n\n\n\n\n\n\n\nhtml`&lt;div&gt;${grid_departements}&lt;/div&gt;`\n\n\n\n\n\n\n\n\n// spanner pour les exemples de code\n// l√† si on a une carte,\n// pas l√† si on affiche les m√©tadonn√©es (pour laisser plus de places)\nright_spanner_map_france =  (choice_print_map_france == \"Carte\") ? spanner_code_france : \"\"\n\n\n\n\n\n\n\nspanner_code_france = html`\n&lt;div name=\"code-bloc\" class=\"code-bloc\"&gt;\n    &lt;div name=\"choice-code\" style=\"grid-area: choice-code; position: relative;\"&gt;\n        ${viewof langage_requete}\n    &lt;/div&gt;\n    &lt;div name=\"code\" style=\"grid-area: code; position: relative;\" class=\"code\"&gt;\n        &lt;span class=\"code-bloc-title\"&gt;\n            Comment faire en &lt;code&gt;${langage}&lt;/code&gt; ${logo[langage.toLowerCase()]}\n        &lt;/span&gt;\n        &lt;span class=\"code-content\"&gt;\n            ${print_program_france(langage, selectedlevel, format, year, drom_rapproches, simplification_percent)}\n        &lt;/span&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n`\n\n\n\n\n\n\n\ngrid_structure = (choice_print_map_france == \"Carte\") ?\n    `'selectors map choice-code'\n                '. map code'\n                '. map .'\n                '. map .'\n                'download map .'`\n    :\n    `'selectors map info'\n                '. map info'\n                '. map info'\n                'download map info'\n                'code code info'`\ngrid_repartition =  (choice_print_map_france == \"Carte\") ?\n    '23% 45% 32%' :\n    '23% 65% 12%'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Source: https://observablehq.com/@mbostock/dashboard\ngrid = {\n\n    let grid ;\n\n    if (availableWidth&gt;smallScreen){\n        grid = html`\n        &lt;div class=\"cartiflette-example\" style=\"\n            margin: 0;\n            border: none;\n            display: grid;\n            width: ${availableWidth};\n            grid-template-areas: ${grid_structure};\n            grid-template-columns: ${grid_repartition};\n            \"&gt;\n            \n            &lt;div name=\"selectors\" style=\"grid-area: selectors; position: relative;\"&gt;\n                ${viewof choice_print_map_france}\n                ${viewof year}\n                ${viewof selectedlevel}\n                ${viewof format}\n                ${viewof simplification_percent}\n                ${viewof drom_rapproches}\n            &lt;/div&gt;\n            \n            &lt;div name=\"map\" style=\"grid-area: map; position: relative;\"&gt;\n                ${object_print_map_france}\n            &lt;/div&gt;\n\n            ${right_spanner_map_france}\n\n            &lt;div name=\"download-button\" style=\"grid-area: download; position: relative;\"&gt;\n                ${button_france}\n            &lt;/div&gt;\n\n        &lt;/div&gt;\n        `\n        return grid\n    }\n\n    grid = html`\n    &lt;div class=\"cartiflette-example\" style=\"\n        margin: 0;\n        border: none;\n        display: grid;\n        width: ${availableWidth};\n        grid-template-areas: \n            'selectors'\n            'map'\n            'download'\n            'choice-code'\n            'code';\n        grid-template-rows: auto auto auto auto auto;\n        grid-gap: 10px;\n        \"&gt;\n\n        &lt;div name=\"selectors\" style=\"grid-area: selectors; position: relative;\"&gt;\n            ${viewof choice_print_map_france}\n            ${viewof year}\n            ${viewof selectedlevel}\n            ${viewof format}\n            ${viewof simplification_percent}\n            ${viewof drom_rapproches}\n        &lt;/div&gt;\n        \n        &lt;div name=\"map\" style=\"grid-area: map; position: relative;\"&gt;\n            ${object_print_map_france}\n        &lt;/div&gt;\n\n        &lt;div name=\"download-button\" style=\"grid-area: download; position: relative;\"&gt;\n            ${button_france}\n        &lt;/div&gt;\n\n        &lt;div name=\"code-bloc\" class=\"code-bloc\"&gt;\n            &lt;div name=\"choice-code\" style=\"grid-area: choice-code; position: relative;\"&gt;\n                ${viewof langage_requete}\n            &lt;/div&gt;\n\n            &lt;div name=\"code\" style=\"grid-area: code; position: relative;\" class=\"code\"&gt;\n                &lt;span class=\"code-bloc-title\"&gt;\n                    Comment faire en &lt;code&gt;${langage}&lt;/code&gt; ${logo[langage.toLowerCase()]}\n                &lt;/span&gt;\n                &lt;span class=\"code-content\"&gt;\n                    ${print_program_france(langage, selectedlevel, format, year, drom_rapproches, simplification_percent)}\n                &lt;/span&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n    &lt;/div&gt;\n    `\n    return grid\n}\n\n\n\n\n\n\n\ngrid_departements =  {\n    let grid ;\n\n    if (availableWidth&gt;smallScreen){\n        grid = html`\n        &lt;div style=\"\n            margin: 0;\n            border: none;\n            display: grid;\n            width: ${availableWidth};\n            grid-template-areas: \n                'selectors_departements map_departements choice-code_departements'\n                '. map_departements code_departements'\n                '. map_departements .'\n                '. map_departements .'\n                'download_departements map_departements .';\n            grid-template-columns: 23% 45% 32%;\n            \"&gt;\n            \n            &lt;div name=\"selectors_departements\" style=\"grid-area: selectors_departements; position: relative;\"&gt;\n                ${viewof choice_print_map_departement}\n                ${viewof selected_departements}\n                ${year_emprise}\n                ${format_emprise}\n                ${simplification_percent_emprise}\n                ${viewof arrondissement}\n            &lt;/div&gt;\n            \n            &lt;div name=\"map_departements\" style=\"grid-area: map_departements; position: relative;\"&gt;\n                ${object_print_map_departement}\n            &lt;/div&gt;\n\n            &lt;div name=\"code-bloc-departement\" class=\"code-bloc\"&gt;\n                &lt;div name=\"choice-code_departements\" style=\"grid-area: choice-code_departements; position: relative;\"&gt;\n                    ${language_emprise_departements}\n                &lt;/div&gt;\n\n                &lt;div name=\"code_departements\" style=\"grid-area: code_departements; position: relative;\" class=\"code\"&gt;\n                    &lt;span class=\"code-bloc-title\"&gt;\n                        Comment faire en &lt;code&gt;${langage_departements}&lt;/code&gt; ${logo[langage_departements.toLowerCase()]}\n                    &lt;/span&gt;\n                    &lt;span class=\"code-content\"&gt;\n                        ${print_program_departement_single(langage_departements, selected_departements, selectedlevel, format, year)}\n                    &lt;/span&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n\n            &lt;div name=\"download-button_departements\" style=\"grid-area: download_departements; position: relative;\"&gt;\n                ${button_departements}\n            &lt;/div&gt;\n\n        &lt;/div&gt;\n        `\n        return grid\n    }\n\n    grid = html`\n    &lt;div style=\"\n        margin: 0;\n        border: none;\n        display: grid;\n        width: ${availableWidth};\n        grid-template-areas: \n            'selectors_departements'\n            'map_departements'\n            'download_departements'\n            'choice-code_departements'\n            'code_departements';\n        grid-template-rows: auto auto auto auto auto;\n        grid-gap: 10px;\n        \"&gt;\n\n        &lt;div name=\"selectors_departements\" style=\"grid-area: selectors_departements; position: relative;\"&gt;\n                ${viewof choice_print_map_departement}\n                ${viewof selected_departements}\n                ${year_emprise}\n                ${format_emprise}\n                ${simplification_percent_emprise}\n                ${viewof arrondissement}\n        &lt;/div&gt;\n        \n        &lt;div name=\"map_departements\" style=\"grid-area: map_departements; position: relative;\"&gt;\n            ${object_print_map_departement}\n        &lt;/div&gt;\n\n        &lt;div name=\"download-button_departements\" style=\"grid-area: download_departements; position: relative;\"&gt;\n            ${button_departements}\n        &lt;/div&gt;\n\n        &lt;div name=\"code-bloc-departement\" class=\"code-bloc\"&gt;\n            &lt;div name=\"choice-code_departements\" style=\"grid-area: choice-code_departements; position: relative;\"&gt;\n                ${language_emprise_departements}\n            &lt;/div&gt;\n\n            &lt;div name=\"code_departements\" style=\"grid-area: code_departements; position: relative;\" class=\"code\"&gt;\n                &lt;span class=\"code-bloc-title\"&gt;\n                    Comment faire en &lt;code&gt;${langage_departements}&lt;/code&gt; ${logo[langage_departements.toLowerCase()]}\n                &lt;/span&gt;\n                &lt;span class=\"code-content\"&gt;\n                    ${print_program_departement_single(langage_departements, selected_departements, selectedlevel, format, year)}\n                &lt;/span&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n    &lt;/div&gt;\n    `\n\n    return grid\n}\n\n\n\n\n\n\n\n\n\nmap_france = topohelper\n  .from(\n    await data_france\n  )\n  .project({ proj: l93 })\n  .view({\n    tooltip: true,\n    zoom: true,\n    size: [\n        availableWidth &gt; smallScreen ? availableWidth*0.4 : availableWidth*0.95, availableHeight * 0.6\n    ]})\n\n\n\n\n\n\n\n// On affiche la carte ou les m√©tadonn√©es selon la valeur du bouton radio\nobject_print_map_france = (choice_print_map_france == \"Carte\") ?\n    map_france :\n    viewof table_attributes_map_france\n\n\n\n\n\n\n\n\n// Injecter un formattage html pour le tableau de m√©tadonn√©es \nmapping = Object.keys(attributes_map_france[0]).reduce((acc, key) =&gt; {\n    acc[key] = (d) =&gt; html`&lt;div&gt;${d}&lt;/div&gt;`;\n    return acc;\n}, {})\n\n\n\n\n\n\n\nviewof table_attributes_map_france = Inputs.table(\n    annotateFields(attributes_map_france, annotationsSources),\n    {\n        format: mapping\n    }\n)\n\n\n\n\n\n\n\n\nviewof choice_print_map_departement  = Inputs.radio(['Carte', 'M√©tadonn√©es associ√©es'], {value: \"Carte\"})\n\n\n\n\n\n\n\nobject_print_map_departement = (choice_print_map_departement == \"Carte\") ?\n    map_multiple_departement :\n    viewof table_attributes_map_department"
  },
  {
    "objectID": "index.html#r√©cup√©rer-un-fond-de-carte-france-enti√®re",
    "href": "index.html#r√©cup√©rer-un-fond-de-carte-france-enti√®re",
    "title": "Documentation projet cartiflette üßÄ",
    "section": "",
    "text": "html`&lt;div&gt;${grid}&lt;/div&gt;`"
  },
  {
    "objectID": "index.html#r√©cup√©rer-un-fond-de-carte-sur-une-emprise-limit√©e",
    "href": "index.html#r√©cup√©rer-un-fond-de-carte-sur-une-emprise-limit√©e",
    "title": "Documentation projet cartiflette üßÄ",
    "section": "",
    "text": "html`&lt;div&gt;${grid_departements}&lt;/div&gt;`\n\n\n\n\n\n\n\n\n// spanner pour les exemples de code\n// l√† si on a une carte,\n// pas l√† si on affiche les m√©tadonn√©es (pour laisser plus de places)\nright_spanner_map_france =  (choice_print_map_france == \"Carte\") ? spanner_code_france : \"\"\n\n\n\n\n\n\n\nspanner_code_france = html`\n&lt;div name=\"code-bloc\" class=\"code-bloc\"&gt;\n    &lt;div name=\"choice-code\" style=\"grid-area: choice-code; position: relative;\"&gt;\n        ${viewof langage_requete}\n    &lt;/div&gt;\n    &lt;div name=\"code\" style=\"grid-area: code; position: relative;\" class=\"code\"&gt;\n        &lt;span class=\"code-bloc-title\"&gt;\n            Comment faire en &lt;code&gt;${langage}&lt;/code&gt; ${logo[langage.toLowerCase()]}\n        &lt;/span&gt;\n        &lt;span class=\"code-content\"&gt;\n            ${print_program_france(langage, selectedlevel, format, year, drom_rapproches, simplification_percent)}\n        &lt;/span&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n`\n\n\n\n\n\n\n\ngrid_structure = (choice_print_map_france == \"Carte\") ?\n    `'selectors map choice-code'\n                '. map code'\n                '. map .'\n                '. map .'\n                'download map .'`\n    :\n    `'selectors map info'\n                '. map info'\n                '. map info'\n                'download map info'\n                'code code info'`\ngrid_repartition =  (choice_print_map_france == \"Carte\") ?\n    '23% 45% 32%' :\n    '23% 65% 12%'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Source: https://observablehq.com/@mbostock/dashboard\ngrid = {\n\n    let grid ;\n\n    if (availableWidth&gt;smallScreen){\n        grid = html`\n        &lt;div class=\"cartiflette-example\" style=\"\n            margin: 0;\n            border: none;\n            display: grid;\n            width: ${availableWidth};\n            grid-template-areas: ${grid_structure};\n            grid-template-columns: ${grid_repartition};\n            \"&gt;\n            \n            &lt;div name=\"selectors\" style=\"grid-area: selectors; position: relative;\"&gt;\n                ${viewof choice_print_map_france}\n                ${viewof year}\n                ${viewof selectedlevel}\n                ${viewof format}\n                ${viewof simplification_percent}\n                ${viewof drom_rapproches}\n            &lt;/div&gt;\n            \n            &lt;div name=\"map\" style=\"grid-area: map; position: relative;\"&gt;\n                ${object_print_map_france}\n            &lt;/div&gt;\n\n            ${right_spanner_map_france}\n\n            &lt;div name=\"download-button\" style=\"grid-area: download; position: relative;\"&gt;\n                ${button_france}\n            &lt;/div&gt;\n\n        &lt;/div&gt;\n        `\n        return grid\n    }\n\n    grid = html`\n    &lt;div class=\"cartiflette-example\" style=\"\n        margin: 0;\n        border: none;\n        display: grid;\n        width: ${availableWidth};\n        grid-template-areas: \n            'selectors'\n            'map'\n            'download'\n            'choice-code'\n            'code';\n        grid-template-rows: auto auto auto auto auto;\n        grid-gap: 10px;\n        \"&gt;\n\n        &lt;div name=\"selectors\" style=\"grid-area: selectors; position: relative;\"&gt;\n            ${viewof choice_print_map_france}\n            ${viewof year}\n            ${viewof selectedlevel}\n            ${viewof format}\n            ${viewof simplification_percent}\n            ${viewof drom_rapproches}\n        &lt;/div&gt;\n        \n        &lt;div name=\"map\" style=\"grid-area: map; position: relative;\"&gt;\n            ${object_print_map_france}\n        &lt;/div&gt;\n\n        &lt;div name=\"download-button\" style=\"grid-area: download; position: relative;\"&gt;\n            ${button_france}\n        &lt;/div&gt;\n\n        &lt;div name=\"code-bloc\" class=\"code-bloc\"&gt;\n            &lt;div name=\"choice-code\" style=\"grid-area: choice-code; position: relative;\"&gt;\n                ${viewof langage_requete}\n            &lt;/div&gt;\n\n            &lt;div name=\"code\" style=\"grid-area: code; position: relative;\" class=\"code\"&gt;\n                &lt;span class=\"code-bloc-title\"&gt;\n                    Comment faire en &lt;code&gt;${langage}&lt;/code&gt; ${logo[langage.toLowerCase()]}\n                &lt;/span&gt;\n                &lt;span class=\"code-content\"&gt;\n                    ${print_program_france(langage, selectedlevel, format, year, drom_rapproches, simplification_percent)}\n                &lt;/span&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n    &lt;/div&gt;\n    `\n    return grid\n}\n\n\n\n\n\n\n\ngrid_departements =  {\n    let grid ;\n\n    if (availableWidth&gt;smallScreen){\n        grid = html`\n        &lt;div style=\"\n            margin: 0;\n            border: none;\n            display: grid;\n            width: ${availableWidth};\n            grid-template-areas: \n                'selectors_departements map_departements choice-code_departements'\n                '. map_departements code_departements'\n                '. map_departements .'\n                '. map_departements .'\n                'download_departements map_departements .';\n            grid-template-columns: 23% 45% 32%;\n            \"&gt;\n            \n            &lt;div name=\"selectors_departements\" style=\"grid-area: selectors_departements; position: relative;\"&gt;\n                ${viewof choice_print_map_departement}\n                ${viewof selected_departements}\n                ${year_emprise}\n                ${format_emprise}\n                ${simplification_percent_emprise}\n                ${viewof arrondissement}\n            &lt;/div&gt;\n            \n            &lt;div name=\"map_departements\" style=\"grid-area: map_departements; position: relative;\"&gt;\n                ${object_print_map_departement}\n            &lt;/div&gt;\n\n            &lt;div name=\"code-bloc-departement\" class=\"code-bloc\"&gt;\n                &lt;div name=\"choice-code_departements\" style=\"grid-area: choice-code_departements; position: relative;\"&gt;\n                    ${language_emprise_departements}\n                &lt;/div&gt;\n\n                &lt;div name=\"code_departements\" style=\"grid-area: code_departements; position: relative;\" class=\"code\"&gt;\n                    &lt;span class=\"code-bloc-title\"&gt;\n                        Comment faire en &lt;code&gt;${langage_departements}&lt;/code&gt; ${logo[langage_departements.toLowerCase()]}\n                    &lt;/span&gt;\n                    &lt;span class=\"code-content\"&gt;\n                        ${print_program_departement_single(langage_departements, selected_departements, selectedlevel, format, year)}\n                    &lt;/span&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n\n            &lt;div name=\"download-button_departements\" style=\"grid-area: download_departements; position: relative;\"&gt;\n                ${button_departements}\n            &lt;/div&gt;\n\n        &lt;/div&gt;\n        `\n        return grid\n    }\n\n    grid = html`\n    &lt;div style=\"\n        margin: 0;\n        border: none;\n        display: grid;\n        width: ${availableWidth};\n        grid-template-areas: \n            'selectors_departements'\n            'map_departements'\n            'download_departements'\n            'choice-code_departements'\n            'code_departements';\n        grid-template-rows: auto auto auto auto auto;\n        grid-gap: 10px;\n        \"&gt;\n\n        &lt;div name=\"selectors_departements\" style=\"grid-area: selectors_departements; position: relative;\"&gt;\n                ${viewof choice_print_map_departement}\n                ${viewof selected_departements}\n                ${year_emprise}\n                ${format_emprise}\n                ${simplification_percent_emprise}\n                ${viewof arrondissement}\n        &lt;/div&gt;\n        \n        &lt;div name=\"map_departements\" style=\"grid-area: map_departements; position: relative;\"&gt;\n            ${object_print_map_departement}\n        &lt;/div&gt;\n\n        &lt;div name=\"download-button_departements\" style=\"grid-area: download_departements; position: relative;\"&gt;\n            ${button_departements}\n        &lt;/div&gt;\n\n        &lt;div name=\"code-bloc-departement\" class=\"code-bloc\"&gt;\n            &lt;div name=\"choice-code_departements\" style=\"grid-area: choice-code_departements; position: relative;\"&gt;\n                ${language_emprise_departements}\n            &lt;/div&gt;\n\n            &lt;div name=\"code_departements\" style=\"grid-area: code_departements; position: relative;\" class=\"code\"&gt;\n                &lt;span class=\"code-bloc-title\"&gt;\n                    Comment faire en &lt;code&gt;${langage_departements}&lt;/code&gt; ${logo[langage_departements.toLowerCase()]}\n                &lt;/span&gt;\n                &lt;span class=\"code-content\"&gt;\n                    ${print_program_departement_single(langage_departements, selected_departements, selectedlevel, format, year)}\n                &lt;/span&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n    &lt;/div&gt;\n    `\n\n    return grid\n}\n\n\n\n\n\n\n\n\n\nmap_france = topohelper\n  .from(\n    await data_france\n  )\n  .project({ proj: l93 })\n  .view({\n    tooltip: true,\n    zoom: true,\n    size: [\n        availableWidth &gt; smallScreen ? availableWidth*0.4 : availableWidth*0.95, availableHeight * 0.6\n    ]})\n\n\n\n\n\n\n\n// On affiche la carte ou les m√©tadonn√©es selon la valeur du bouton radio\nobject_print_map_france = (choice_print_map_france == \"Carte\") ?\n    map_france :\n    viewof table_attributes_map_france\n\n\n\n\n\n\n\n\n// Injecter un formattage html pour le tableau de m√©tadonn√©es \nmapping = Object.keys(attributes_map_france[0]).reduce((acc, key) =&gt; {\n    acc[key] = (d) =&gt; html`&lt;div&gt;${d}&lt;/div&gt;`;\n    return acc;\n}, {})\n\n\n\n\n\n\n\nviewof table_attributes_map_france = Inputs.table(\n    annotateFields(attributes_map_france, annotationsSources),\n    {\n        format: mapping\n    }\n)\n\n\n\n\n\n\n\n\nviewof choice_print_map_departement  = Inputs.radio(['Carte', 'M√©tadonn√©es associ√©es'], {value: \"Carte\"})\n\n\n\n\n\n\n\nobject_print_map_departement = (choice_print_map_departement == \"Carte\") ?\n    map_multiple_departement :\n    viewof table_attributes_map_department"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Les deux principaux objectifs de cartiflette:\n\nfaciliter et normaliser la r√©cup√©ration de fonds de carte officiels pour simplifier le travail des cartographes qui d√©sirent associer leurs donn√©es √† des fonds de carte administratifs ;\nenrichir les fonds de carte officiels pour limiter les pr√©parations de donn√©es √† la charge des cartographes.\n\nLe projet a √©t√© initi√© dans le cadre du Programme interminist√©riel 10% qui vise √† favoriser les √©changes entre data scientists de l‚Äôadministration fran√ßaise.\nPlus de d√©tails √† venir"
  },
  {
    "objectID": "use-case/index.html",
    "href": "use-case/index.html",
    "title": "Galerie d‚Äôexemples Python",
    "section": "",
    "text": "Important\n\n\n\nCette section est un work in progress!\n\n\nLes exemples dans d‚Äôautres langages arriveront prochainement\n\nR√©cup√©ration de donn√©es consolid√©es ville/arrondissement\nUne carte de France rapprochant les DROM de la France hexagonale et proposant un zoom sur l‚ÄôIle de France"
  },
  {
    "objectID": "use-case/usecase1.html",
    "href": "use-case/usecase1.html",
    "title": "Associer des arrondissements √† des donn√©es communales avec cartiflette",
    "section": "",
    "text": "Important\n\n\n\n\n\nCette page est un work in progress! Des exemples dans d‚Äôautres langages que Python  viendront ult√©rieurement.\nCette page fait partie d‚Äôune s√©rie de tutoriels illustrant les fonctionnalit√©s de cartiflette. Pour retrouver la liste de ceux-ci, c‚Äôest ici.\nCe tutoriel vise √† illustrer un cas d‚Äôusage classique de cartiflette : r√©cup√©rer de mani√®re flexible un fonds de carte m√©langeant les niveaux administratifs diff√©rents que sont communes et arrondissements.\nCe besoin classique est illustr√© √† travers la construction d‚Äôune carte de la disponibilit√© de v√©libs dans la petite couronne parisienne (Paris intra-muros et d√©partements limitrophes). L‚Äôobjectif de ce tutoriel est de faire une carte du nombre de v√©libs au km¬≤ dans chaque arrondissement de Paris intra-muros et chaque commune de la petite couronne. Il illustre, pas √† pas, la mani√®re dont cartiflette simplifie la cr√©ation de la Figure¬†1 :\nhtml`&lt;div class=\"destination-content\"&gt;\n  &lt;!-- Content will be inserted here automatically --&gt;\n&lt;/div&gt;`\nwindow.onload = function() {\n    // Capture the content within the 'final-map' class, targeting the nested 'cell-output cell-output-display' class\n    const finalMapElement = document.querySelector('.final-map .cell-output.cell-output-display');\n\n    if (finalMapElement) {\n        const finalMapContent = finalMapElement.innerHTML;\n        document.querySelector('.destination-content').innerHTML = finalMapContent;\n    } else {\n        console.error(\"The element with class 'cell-output cell-output-display' within 'final-map' was not found.\");\n    }\n};"
  },
  {
    "objectID": "use-case/usecase1.html#la-r√©cup√©ration-des-donn√©es-utilisant-cartiflette",
    "href": "use-case/usecase1.html#la-r√©cup√©ration-des-donn√©es-utilisant-cartiflette",
    "title": "Associer des arrondissements √† des donn√©es communales avec cartiflette",
    "section": "2.1 La r√©cup√©ration des donn√©es utilisant cartiflette",
    "text": "2.1 La r√©cup√©ration des donn√©es utilisant cartiflette\nLes contours administratifs officiels sont produits par l‚ÄôIGN et utilisent le code officiel g√©ographique (COG) (liste officielle des entit√©s administratives) produit par l‚ÄôInsee.\nLa source la plus simple pour r√©pondre √† notre besoin est AdminExpress EXPRESS-COG-CARTO-TERRITOIRE. En l‚Äôoccurrence, seuls quelques espaces nous int√©ressent: ce sont les villes et arrondissements de la petite couronne parisienne (d√©partements 75, 92, 93 et 94).\nAvec la fonction carti_download, l‚Äôimport de ces donn√©es est assez transparent:\n\n\n\nListing¬†1: Example d‚Äôutilisation de cartiflette\n\n\n\nfrom cartiflette import carti_download\n\n# 1. Fonds communaux\ncontours_villes_arrt = carti_download(\n    values = [\"75\", \"92\", \"93\", \"94\"],\n1    crs = 4326,\n    borders=\"COMMUNE_ARRONDISSEMENT\",\n2    filter_by=\"DEPARTEMENT\",\n    source=\"EXPRESS-COG-CARTO-TERRITOIRE\",\n    year=2022)\n\n# 2. D√©partements \n3departements = contours_villes_arrt.dissolve(\"INSEE_DEP\")\n\n\n1\n\n4326 est le code du syst√®me de repr√©sentation WGS84 (le m√™me que celui des donn√©es V√©lib). De futures d√©veloppement de cartiflette permettront de r√©cup√©rer des donn√©es avec d‚Äôautres projections, notamment les syst√®mes Lambert.\n\n2\n\nIci on r√©cup√®re seulement des d√©partements, l‚Äôemprise la plus petite qui puisse satisfaire notre besoin. N√©anmoins, il serait possible d‚Äôobtenir les donn√©es √† une autre √©chelle g√©ographique, par exemple la r√©gion Ile de France, en sp√©cifiant les arguments filter_by=\"DEPARTEMENT\" et values=\"11\".\n\n3\n\nLa construction du fonds de carte departements se fait simplement avec la m√©thode dissolve. Il nous sera utile pour contextualiser la carte.\n\n\n\n\n\n\n\ncontours_villes_arrt est un GeoDataFrame classique, il est donc possible d‚Äôappliquer √† celui-ci les m√©thodes usuelles de GeoPandas par exemple la m√©thode dissolve ci-dessus. Le masque obtenu pour notre carte est celui-ci\n\ncontours_villes_arrt.plot()\n\n\n\n\n\n\n\n\nPour voir le code permettant d‚Äôobtenir un GeoDataFrame √©quivalent sans passer par cartiflette, vous pouvez vous rendre dans la partie Comment faire sans cartiflette ?. La section Bilan fournit quelques √©l√©ments de comparaison entre l‚Äôapproche avec et celle sans cartiflette (temps de traitement, volume de donn√©es t√©l√©charg√©es, nombre de lignes de codes, etc.)."
  },
  {
    "objectID": "use-case/usecase1.html#le-reste-du-travail-apr√®s-avoir-utilis√©-cartiflette",
    "href": "use-case/usecase1.html#le-reste-du-travail-apr√®s-avoir-utilis√©-cartiflette",
    "title": "Associer des arrondissements √† des donn√©es communales avec cartiflette",
    "section": "2.2 Le reste du travail apr√®s avoir utilis√© cartiflette",
    "text": "2.2 Le reste du travail apr√®s avoir utilis√© cartiflette\nLa suite du travail n‚Äôest pas intrins√®quement li√© √† cartiflette mais correspond √† de la manipulation de donn√©es spatiales.\nComme nous avons besoin de localiser les stations dans les arrondissements, nous faisons une jointure spatiale entre notre fonds de carte et nos donn√©es V√©lib\n\nstations_info = gpd.sjoin(\n    stations, contours_villes_arrt, predicate=\"within\"\n)\n\nOutre la localisation des stations au niveau communes ou arrondissement, cela permet d‚Äôajouter une ribambelle de m√©tadonn√©es (des informations annexes) √† nos donn√©es initiales:\n\n\n\n\n\n\n\n\n\ncapacity\nname\nstationcode\ngeometry\nlon\nlat\nindex_right\nINSEE_DEP\nINSEE_REG\nID\n...\nAAV2020\nTAAV2017\nTDAAV2017\nCATEAAV2020\nBV2012\nLIBELLE_DEPARTEMENT\nLIBELLE_REGION\nPAYS\nSOURCE\nAREA\n\n\n\n\n0\n36\nFaubourg Poissonniere - Delta\n9118\nPOINT (2.34975 48.88256)\n2.349748\n48.882556\n6\n75\n11\nARR_MUNI0000000009736042\n...\n001\n5\n50\n11\n75056\nParis\n√éle-de-France\nFrance\nIGN:EXPRESS-COG-CARTO-TERRITOIRE\nNaN\n\n\n1\n34\nPlace des Larris\n41206\nPOINT (2.47802 48.85684)\n2.478024\n48.856836\n129\n94\n11\nCOMMUNE_0000000009736522\n...\n001\n5\n50\n12\n75056\nVal-de-Marne\n√éle-de-France\nFrance\nIGN:EXPRESS-COG-CARTO-TERRITOIRE\nmetropole\n\n\n\n\n2 rows √ó 33 columns\n\n\n\nLe d√©compte des stations par communes et arrondissements se fait alors assez ais√©ment en utilisant la grammaire Pandas. Pour cela, il est possible d‚Äôutiliser la variable INSEE_COG construite par cartiflette pour consolider les codes communes des arrondissements et des communes2\n\ncomptes = (\n    stations_info\n    .groupby(\"INSEE_COG\")\n    .agg({\"capacity\": \"sum\"})\n    .reset_index()\n)\n\nEnfin, il ne reste plus qu‚Äô√† construire la variable d‚Äôint√©r√™t, ce qui n‚Äôest pas du travail li√© √† cartiflette:\n\n\nD√©rouler üëáÔ∏è pour voir le code permettant pr√©parer la carte\nimport pandas as pd\n\n# Conversion des variables\n1contours_villes_arrt[\"INSEE_COG\"] = contours_villes_arrt[\"INSEE_COG\"].astype(str)\ncomptes[\"INSEE_COG\"] = comptes[\"INSEE_COG\"].astype(str)\n\n# Jointure pour retrouver la dimension g√©ographique de nos donn√©es agr√©g√©es\ncomptes_velib_by_city_arrt = contours_villes_arrt.merge(\n    comptes, how = \"inner\", on = \"INSEE_COG\"\n)\ncomptes_velib_by_city_arrt['densite'] = comptes_velib_by_city_arrt['capacity']\n\n# Cr√©ation des variables pour la taille de nos ronds proportionnels\ndf_points = comptes_velib_by_city_arrt.copy()\n\ndf_points[\"markersize\"] = 12*df_points[\"densite\"].div(comptes_velib_by_city_arrt.to_crs(2154).area.div(10**6).sum())\n\nbins = [-float('inf'), 20, 100, 500, float('inf')]\nlabels = [\"Moins de 20\", \"Entre 20 et 100\", \"Entre 100 et 500\", \"Plus de 500\"]\n\ndf_points[\"markercolor\"] = pd.cut(\n    df_points['densite'], bins=bins, labels=labels, right=True\n)\n\n# Centre de nos cercles\ndf_points[\"geometry\"] = df_points[\"geometry\"].centroid\n\n\n\n1\n\nOn force la conversion de la variable INSEE_COG en string pour √©viter le type object de Pandas qui peut poser des probl√®mes lors des jointures.\n\n\n\n\nFinalement, on obtient la carte avec le code suivant\n\n\n\nD√©rouler üëáÔ∏è pour voir le code permettant de faire la carte\nimport matplotlib.pyplot as plt\n\n# Create a figure and axes object\nfig, ax = plt.subplots(figsize=(7, 7))\n\n# Plot the base map\ncomptes_velib_by_city_arrt.plot(\n    ax=ax,\n    color=\"lightgray\",\n    edgecolor=\"grey\",\n    linewidth=0.4,\n    alpha=0.3\n)\n\n# Plot the points with customized colors and sizes\ndf_points.plot(\n    ax=ax,\n    column=\"markercolor\",\n    markersize=\"markersize\",\n    alpha=0.7,\n    legend=True,\n    legend_kwds={\"loc\": \"upper center\", \"ncol\": 2, \"bbox_to_anchor\": (0.5, 0.05)},\n    cmap=\"viridis\",\n)\n\n# Plot the department boundaries\ndepartements.boundary.plot(ax=ax, edgecolor=\"black\", alpha=0.3)\n\n# Remove axes and set the title\nax.axis(\"off\")\nax.set_title(\"Densit√© de population dans la petite couronne\")\n\n# Customize the legend title\nax.get_legend().set_title(\"Nombre de v√©lib par km¬≤\")\n\n# Add source text\nplt.figtext(\n    0.3,\n    0.15,\n    \"Source: IGN - AdminExpress\",\n    wrap=True,\n    horizontalalignment=\"center\",\n    fontsize=8,\n    style=\"italic\",\n)\n\n# Show the final plot\nplt.show()\n\n\n\n\n\n\n\n\nFigure¬†1: Carte obtenue √† l‚Äôissue de ce tutoriel"
  },
  {
    "objectID": "use-case/usecase1.html#volume-de-donn√©es-t√©l√©charg√©es",
    "href": "use-case/usecase1.html#volume-de-donn√©es-t√©l√©charg√©es",
    "title": "Associer des arrondissements √† des donn√©es communales avec cartiflette",
    "section": "4.1 Volume de donn√©es t√©l√©charg√©es",
    "text": "4.1 Volume de donn√©es t√©l√©charg√©es\n\n\nFonction convert_size pour avoir les tailles de fichiers dans un format lisible par un humain\n# Convert to a human-readable format (e.g., MB, GB)\ndef convert_size(size_bytes):\n    if size_bytes == 0:\n        return \"0B\"\n    size_name = (\"B\", \"KB\", \"MB\", \"GB\", \"TB\")\n    i = int(math.floor(math.log(size_bytes, 1024)))\n    p = math.pow(1024, i)\n    s = round(size_bytes / p, 2)\n    return f\"{s} {size_name[i]}\"\n\n\n\n\nEvaluation de la taille des fichiers issus d‚ÄôAdminExpress\nimport math\nimport os\nfrom pathlib import Path\n\n# Path to the zipped file\nzipped_file = \"ADMIN-EXPRESS-COG-CARTO_3-1__SHP_WGS84G_FRA_2022-04-15.7z\"\n\n# Get the size of the zipped file in bytes\nzipped_size = os.path.getsize(zipped_file)\n\n# Path to the directory containing unzipped files\nunzipped_dir = \"./extracted_files\"\n\nroot_directory = Path(unzipped_dir)\nsize_dir = sum(f.stat().st_size for f in root_directory.glob('**/*') if f.is_file())\n\npoids_archive_compressee = convert_size(zipped_size)\npoids_archive_decompressee = convert_size(size_dir)\n\n\n\n\nEvaluation de la taille des m√™mes donn√©es issues de cartiflette\nwritedir = \"cartiflette-data/usecase1\"\nos.makedirs(writedir, exist_ok=True)\ncontours_villes_arrt.to_file(\n    f\"{writedir}/contours.shp\"\n1)\n\npoids_archive_cartiflette_bytes = os.path.getsize(f\"{writedir}/contours.shp\")\npoids_archive_cartiflette = convert_size(\n    poids_archive_cartiflette_bytes\n)\n\n\n\n1\n\nOn cr√©e un shapefile avec le GeoDataFrame obtenu depuis cartiflette afin d‚Äôavoir une comparaison honn√™te avec le fonds de carte issu du site de l‚ÄôIGN.\n\n\n\n\nLa premi√®re base de comparaison possible est la taille sur disque des fonds de carte r√©cup√©r√©s par cartiflette ou sans passer par ce package. Le code ci-dessus ‚òùÔ∏è permet de construire les statistiques suivantes:\n\nLes donn√©es cartiflette repr√©senteraient 182.23 KB si elles √©taient stock√©es sur disque.\nSans passer par cartiflette, on a besoin de 240.67 MB pour stocker les fonds de carte d√©compress√©s auxquels il faut ajouter 142.86 MB pour stocker l‚Äôarchive compress√©e.\n\nAutrement dit, les donn√©es r√©cup√©r√©es sans cartiflette repr√©sentent 2155 fois le volume de celles exclusivement n√©cessaires pour cette carte.\nL‚Äôarborescence du dossier d√©compress√© est √©galement assez cons√©quente: nous avons 68 fichiers. L‚Äôarborescence compl√®te obtenue sans cartiflette est disponible ci-dessous. Avec cartiflette aucun fichier n‚Äôest √©crit sur disque, tout est directement accessible dans la session Python.\n\n\nArborescence compl√®te\n\n\n\nextracted_files/\n‚îî‚îÄ‚îÄ ADMIN-EXPRESS-COG-CARTO_3-1__SHP_WGS84G_FRA_2022-04-15/\n    ‚îú‚îÄ‚îÄ ADMIN-EXPRESS-COG-CARTO/\n    ‚îÇ   ‚îú‚îÄ‚îÄ 1_DONNEES_LIVRAISON_2022-04-15/\n    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ADECOGC_3-1_SHP_WGS84G_FRA/\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ARRONDISSEMENT.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ARRONDISSEMENT.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ARRONDISSEMENT.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ARRONDISSEMENT.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ARRONDISSEMENT.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ARRONDISSEMENT_MUNICIPAL.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ARRONDISSEMENT_MUNICIPAL.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ARRONDISSEMENT_MUNICIPAL.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ARRONDISSEMENT_MUNICIPAL.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ARRONDISSEMENT_MUNICIPAL.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CANTON.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CANTON.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CANTON.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CANTON.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CANTON.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_ARRONDISSEMENT_MUNICIPAL.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_ARRONDISSEMENT_MUNICIPAL.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_ARRONDISSEMENT_MUNICIPAL.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_ARRONDISSEMENT_MUNICIPAL.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_ARRONDISSEMENT_MUNICIPAL.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_COMMUNE.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_COMMUNE.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_COMMUNE.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_COMMUNE.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_COMMUNE.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_COMMUNE_ASSOCIEE_OU_DELEGUEE.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_COMMUNE_ASSOCIEE_OU_DELEGUEE.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_COMMUNE_ASSOCIEE_OU_DELEGUEE.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_COMMUNE_ASSOCIEE_OU_DELEGUEE.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_COMMUNE_ASSOCIEE_OU_DELEGUEE.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COLLECTIVITE_TERRITORIALE.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COLLECTIVITE_TERRITORIALE.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COLLECTIVITE_TERRITORIALE.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COLLECTIVITE_TERRITORIALE.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COLLECTIVITE_TERRITORIALE.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COMMUNE.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COMMUNE.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COMMUNE.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COMMUNE.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COMMUNE.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COMMUNE_ASSOCIEE_OU_DELEGUEE.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COMMUNE_ASSOCIEE_OU_DELEGUEE.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COMMUNE_ASSOCIEE_OU_DELEGUEE.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COMMUNE_ASSOCIEE_OU_DELEGUEE.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COMMUNE_ASSOCIEE_OU_DELEGUEE.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DEPARTEMENT.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DEPARTEMENT.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DEPARTEMENT.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DEPARTEMENT.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DEPARTEMENT.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EPCI.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EPCI.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EPCI.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EPCI.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EPCI.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ REGION.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ REGION.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ REGION.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ REGION.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ REGION.shx\n    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ADECOGC_3-1_SHP_WGS84G_FRA.md5\n    ‚îÇ   ‚îú‚îÄ‚îÄ 1_DONNEES_LIVRAISON_2022-04-15.md5\n    ‚îÇ   ‚îú‚îÄ‚îÄ 2_METADONNEES_LIVRAISON_2022-04-15/\n    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ADECOGC_3-1_SHP_WGS84G_FRA/\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ IGNF_ADECOGC_3-1_SHP_WGS84G_FRA.html\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ IGNF_ADECOGC_3-1_SHP_WGS84G_FRA.xml\n    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ADECOGC_3-1_SHP_WGS84G_FRA.md5\n    ‚îÇ   ‚îú‚îÄ‚îÄ 2_METADONNEES_LIVRAISON_2022-04-15.md5\n    ‚îÇ   ‚îî‚îÄ‚îÄ LISEZ-MOI.pdf\n    ‚îî‚îÄ‚îÄ ADMIN-EXPRESS-COG-CARTO.md5"
  },
  {
    "objectID": "use-case/usecase1.html#nombre-de-lignes-de-code",
    "href": "use-case/usecase1.html#nombre-de-lignes-de-code",
    "title": "Associer des arrondissements √† des donn√©es communales avec cartiflette",
    "section": "4.2 Nombre de lignes de code",
    "text": "4.2 Nombre de lignes de code\n\nmd`La r√©cup√©ration des donn√©es avec \\`cartiflette\\` ne demande que __${nlines_cartiflette} lignes de code__ contre __${nlines_no_cartiflette} sans \\`cartiflette\\`__`\n\n\n\n\n\n\nEn ce qui concerne le temps de d√©veloppement de ce code, on est sur quelques secondes pour le code avec cartiflette en utilisant la documentation interactive d‚Äôexemples contre plusieurs dizaines de minutes pour le code sans cartiflette."
  },
  {
    "objectID": "use-case/usecase1.html#temps-de-traitement",
    "href": "use-case/usecase1.html#temps-de-traitement",
    "title": "Associer des arrondissements √† des donn√©es communales avec cartiflette",
    "section": "4.3 Temps de traitement",
    "text": "4.3 Temps de traitement\nLe code cartiflette permet de r√©cup√©rer les √©l√©ments contextuels n√©cessaires en 4 secondes. Sans cartiflette, il faut 1minutes et 13 secondes. Sans cartiflette, soit un rapport de 1 √† 17 pour cette t√¢che.\n\n\nlabels = [\n    'lst-example-download-adminexpress',\n    'lst-example-unzip-adminexpress',\n    'lst-example-open-adminexpress',\n    'lst-example-merge-adminexpres'\n]\nlabels_cartiflette = [\n    'lst-cartiflette-example'\n]\nnlines_no_cartiflette = d3.sum(nrows_no_cartiflette)\nnlines_cartiflette = d3.sum(nrows_cartiflette)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction extractLineNumbers(label) {\n    const selector = `[aria-describedby^=\"${label}\"]`;\n    const blocks = document.querySelectorAll(selector);\n\n    let lineNumbers = [];\n\n    blocks.forEach(block =&gt; {\n        // Search for ids matching \"annotated-cell-XX-N\"\n        const annotatedCells = block.querySelectorAll('[id^=\"annotated-cell-\"]');\n        annotatedCells.forEach(cell =&gt; {\n            const match = cell.id.match(/annotated-cell-\\d+-(\\d+)/);\n            if (match) {\n                lineNumbers.push(parseInt(match[1], 10));\n            }\n        });\n\n        // Search for ids matching \"cbXX-N\"\n        const cbCells = block.querySelectorAll('[id^=\"cb\"]');\n        cbCells.forEach(cell =&gt; {\n            const match = cell.id.match(/cb\\d+-(\\d+)/);\n            if (match) {\n                lineNumbers.push(parseInt(match[1], 10));\n            }\n        });\n    });\n\n    return lineNumbers;\n}\n\nfunction getMaxLineNumber(label) {\n    const lineNumbers = extractLineNumbers(label);\n    return Math.max(...lineNumbers);\n}\n\n// Iterate over labels to get max line numbers\nnrows_no_cartiflette = labels.map(label =&gt; {\n    const maxLineNumber = getMaxLineNumber(label);\n    return maxLineNumber;\n})\n\nnrows_cartiflette = labels_cartiflette.map(label =&gt; {\n    const maxLineNumber = getMaxLineNumber(label);\n    return maxLineNumber;\n})"
  },
  {
    "objectID": "use-case/usecase1.html#footnotes",
    "href": "use-case/usecase1.html#footnotes",
    "title": "Associer des arrondissements √† des donn√©es communales avec cartiflette",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nLe syst√®me de coordonn√©es WGS84 (World Geodetic System 1984) est un syst√®me de r√©f√©rence g√©od√©sique utilis√© pour repr√©senter les positions g√©ographiques sur la Terre. Ce syst√®me est utilis√© par la plupart des applications GPS et des fournisseurs de tuiles vectorielles comme OpenStreetMap.‚Ü©Ô∏é\nLa variable INSEE_COM correspond au code officiel g√©ographique au niveau communal. La valeur est donc identique pour les 20 arrondissements parisiens.‚Ü©Ô∏é"
  }
]