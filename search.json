[
  {
    "objectID": "use-case/usecase1.html",
    "href": "use-case/usecase1.html",
    "title": "Associer des arrondissements √† des donn√©es communales avec cartiflette",
    "section": "",
    "text": "Important\n\n\n\n\n\nCette page est un work in progress! Des exemples dans d‚Äôautres langages que Python  viendront ult√©rieurement.\nCe tutoriel vise √† illustrer un cas d‚Äôusage classique de cartiflette : r√©cup√©rer de mani√®re flexible un fonds de carte m√©langeant les niveaux administratifs diff√©rents que sont communes et arrondissements.\nCe besoin classique est illustr√© √† travers la construction d‚Äôune carte de la disponibilit√© de v√©libs dans la petite couronne parisienne (Paris intra-muros et d√©partements limitrophes). L‚Äôobjectif de ce tutoriel est de faire une carte du nombre de v√©libs au km¬≤ dans chaque arrondissement de Paris intra-muros et chaque commune de la petite couronne."
  },
  {
    "objectID": "use-case/usecase1.html#la-r√©cup√©ration-des-donn√©es-utilisant-cartiflette",
    "href": "use-case/usecase1.html#la-r√©cup√©ration-des-donn√©es-utilisant-cartiflette",
    "title": "Associer des arrondissements √† des donn√©es communales avec cartiflette",
    "section": "2.1 La r√©cup√©ration des donn√©es utilisant cartiflette",
    "text": "2.1 La r√©cup√©ration des donn√©es utilisant cartiflette\nLes contours administratifs officiels sont produits par l‚ÄôIGN et utilisent le code officiel g√©ographique (COG) (liste officielle des entit√©s administratives) produit par l‚ÄôInsee.\nLa source la plus simple pour r√©pondre √† notre besoin est AdminExpress EXPRESS-COG-CARTO-TERRITOIRE. En l‚Äôoccurrence, seuls quelques espaces nous int√©ressent: ce sont les villes et arrondissements de la petite couronne parisienne (d√©partements 75, 92, 93 et 94).\nAvec la fonction carti_download, l‚Äôimport de ces donn√©es est assez transparent:\n\n\n\nListing¬†1: Example d‚Äôutilisation de cartiflette\n\n\n\nfrom cartiflette import carti_download\n\n# 1. Fonds communaux\ncontours_villes_arrt = carti_download(\n    values = [\"75\", \"92\", \"93\", \"94\"],\n1    crs = 4326,\n    borders=\"COMMUNE_ARRONDISSEMENT\",\n2    filter_by=\"DEPARTEMENT\",\n    source=\"EXPRESS-COG-CARTO-TERRITOIRE\",\n    year=2022)\n\n# 2. D√©partements \n3departements = contours_villes_arrt.dissolve(\"INSEE_DEP\")\n\n\n1\n\n4326 est le code du syst√®me de repr√©sentation WGS84 (le m√™me que celui des donn√©es V√©lib). De futures d√©veloppement de cartiflette permettront de r√©cup√©rer des donn√©es avec d‚Äôautres projections, notamment les syst√®mes Lambert.\n\n2\n\nIci on r√©cup√®re seulement des d√©partements, l‚Äôemprise la plus petite qui puisse satisfaire notre besoin. N√©anmoins, il serait possible d‚Äôobtenir les donn√©es √† une autre √©chelle g√©ographique, par exemple la r√©gion Ile de France, en sp√©cifiant les arguments filter_by=\"DEPARTEMENT\" et values=\"11\".\n\n3\n\nLa construction du fonds de carte departements se fait simplement avec la m√©thode dissolve. Il nous sera utile pour contextualiser la carte.\n\n\n\n\n\n\n\ncontours_villes_arrt est un GeoDataFrame classique, il est donc possible d‚Äôappliquer √† celui-ci les m√©thodes usuelles de GeoPandas par exemple la m√©thode dissolve ci-dessus. Le masque obtenu pour notre carte est celui-ci\n\ncontours_villes_arrt.plot()\n\n\n\n\n\n\n\n\nPour voir le code permettant d‚Äôobtenir un GeoDataFrame √©quivalent sans passer par cartiflette, vous pouvez vous rendre dans la partie Comment faire sans cartiflette ?. La section Bilan fournit quelques √©l√©ments de comparaison entre l‚Äôapproche avec et celle sans cartiflette (temps de traitement, volume de donn√©es t√©l√©charg√©es, nombre de lignes de codes, etc.)."
  },
  {
    "objectID": "use-case/usecase1.html#le-reste-du-travail-apr√®s-avoir-utilis√©-cartiflette",
    "href": "use-case/usecase1.html#le-reste-du-travail-apr√®s-avoir-utilis√©-cartiflette",
    "title": "Associer des arrondissements √† des donn√©es communales avec cartiflette",
    "section": "2.2 Le reste du travail apr√®s avoir utilis√© cartiflette",
    "text": "2.2 Le reste du travail apr√®s avoir utilis√© cartiflette\nLa suite du travail n‚Äôest pas li√© √† cartiflette mais est de la manipulation de donn√©es spatiales.\nComme nous avons besoin de localiser les stations dans les arrondissements, nous faisons une jointure spatiale entre notre fonds de carte et nos donn√©es V√©lib\n\nstations_info = gpd.sjoin(\n    stations, contours_villes_arrt, predicate=\"within\"\n)\n\nOutre la localisation des stations au niveau communes ou arrondissement, cela permet d‚Äôajouter une ribambelle de m√©tadonn√©es (des informations annexes) √† nos donn√©es initiales:\n\n\n\n\n\n\n\n\n\ncapacity\nname\nstationcode\ngeometry\nlon\nlat\nindex_right\nINSEE_DEP\nINSEE_REG\nID\n...\nAAV2020\nTAAV2017\nTDAAV2017\nCATEAAV2020\nBV2012\nLIBELLE_DEPARTEMENT\nLIBELLE_REGION\nPAYS\nSOURCE\nAREA\n\n\n\n\n0\n25\nSilly - Galli√©ni\n21010\nPOINT (2.23255 48.83558)\n2.232550\n48.835584\n49\n92\n11\nCOMMUNE_0000000009736552\n...\n001\n5\n50\n12\n75056\nHauts-de-Seine\n√éle-de-France\nFrance\nIGN:EXPRESS-COG-CARTO-TERRITOIRE\nmetropole\n\n\n1\n36\nGuersant - Gouvion-Saint-Cyr\n17041\nPOINT (2.28767 48.88288)\n2.287667\n48.882878\n11\n75\n11\nARR_MUNI0000000009736041\n...\n001\n5\n50\n11\n75056\nParis\n√éle-de-France\nFrance\nIGN:EXPRESS-COG-CARTO-TERRITOIRE\nNaN\n\n\n\n\n2 rows √ó 33 columns\n\n\n\nLe d√©compte des stations par communes et arrondissements se fait alors assez ais√©ment en utilisant la grammaire Pandas. Pour cela, il est possible d‚Äôutiliser la variable INSEE_COG construite par cartiflette pour consolider les codes communes des arrondissements et des communes2\n\ncomptes = (\n    stations_info\n    .groupby(\"INSEE_COG\")\n    .agg({\"capacity\": \"sum\"})\n    .reset_index()\n)\n\nEnfin, il ne reste plus qu‚Äô√† construire la variable d‚Äôint√©r√™t, ce qui n‚Äôest pas du travail li√© √† cartiflette:\n\n\nD√©rouler üëáÔ∏è pour voir le code permettant pr√©parer la carte\nimport pandas as pd\n\n# Conversion des variables\n1contours_villes_arrt[\"INSEE_COG\"] = contours_villes_arrt[\"INSEE_COG\"].astype(str)\ncomptes[\"INSEE_COG\"] = comptes[\"INSEE_COG\"].astype(str)\n\n# Jointure pour retrouver la dimension g√©ographique de nos donn√©es agr√©g√©es\ncomptes_velib_by_city_arrt = contours_villes_arrt.merge(\n    comptes, how = \"inner\", on = \"INSEE_COG\"\n)\ncomptes_velib_by_city_arrt['densite'] = comptes_velib_by_city_arrt['capacity']\n\n# Cr√©ation des variables pour la taille de nos ronds proportionnels\ndf_points = comptes_velib_by_city_arrt.copy()\n\ndf_points[\"markersize\"] = 12*df_points[\"densite\"].div(comptes_velib_by_city_arrt.to_crs(2154).area.div(10**6).sum())\n\nbins = [-float('inf'), 20, 100, 500, float('inf')]\nlabels = [\"Moins de 20\", \"Entre 20 et 100\", \"Entre 100 et 500\", \"Plus de 500\"]\n\ndf_points[\"markercolor\"] = pd.cut(\n    df_points['densite'], bins=bins, labels=labels, right=True\n)\n\n# Centre de nos cercles\ndf_points[\"geometry\"] = df_points[\"geometry\"].centroid\n\n\n\n1\n\nOn force la conversion de la variable INSEE_COG en string pour √©viter le type object de Pandas qui peut poser des probl√®mes lors des jointures.\n\n\n\n\nFinalement, on obtient la carte avec le code suivant\n\n\nD√©rouler üëáÔ∏è pour voir le code permettant de faire la carte\nimport matplotlib.pyplot as plt\n\nax = comptes_velib_by_city_arrt.plot(\n    color=\"lightgray\", edgecolor=\"grey\", figsize=(7, 7), linewidth=0.4, alpha=0.3\n)\ndf_points.plot(\n    ax=ax,\n    column=\"markercolor\",\n    markersize=\"markersize\",\n    alpha=0.7,  # categorical=False,\n    legend=True,\n    legend_kwds={\"loc\": \"upper center\", \"ncol\": 2, \"bbox_to_anchor\": (0.5, 0.05)},\n    cmap=\"viridis\",\n)\ndepartements.boundary.plot(ax=ax, edgecolor=\"black\", alpha=0.3)\nax.axis(\"off\")\nax.set(title=\"Densit√© de population dans la petite couronne\")\nax.get_legend().set_title(\"Nombre de v√©lib par km¬≤\")\nplt.figtext(\n    0.3,\n    0.15,\n    \"Source: IGN - AdminExpress\",\n    wrap=True,\n    horizontalalignment=\"center\",\n    fontsize=8,\n    style=\"italic\",\n)\n\n\nText(0.3, 0.15, 'Source: IGN - AdminExpress')"
  },
  {
    "objectID": "use-case/usecase1.html#volume-de-donn√©es-t√©l√©charg√©es",
    "href": "use-case/usecase1.html#volume-de-donn√©es-t√©l√©charg√©es",
    "title": "Associer des arrondissements √† des donn√©es communales avec cartiflette",
    "section": "4.1 Volume de donn√©es t√©l√©charg√©es",
    "text": "4.1 Volume de donn√©es t√©l√©charg√©es\n\n\nFonction convert_size pour avoir les tailles de fichiers dans un format lisible par un humain\n# Convert to a human-readable format (e.g., MB, GB)\ndef convert_size(size_bytes):\n    if size_bytes == 0:\n        return \"0B\"\n    size_name = (\"B\", \"KB\", \"MB\", \"GB\", \"TB\")\n    i = int(math.floor(math.log(size_bytes, 1024)))\n    p = math.pow(1024, i)\n    s = round(size_bytes / p, 2)\n    return f\"{s} {size_name[i]}\"\n\n\n\n\nEvaluation de la taille des fichiers issus d‚ÄôAdminExpress\nimport math\nimport os\nfrom pathlib import Path\n\n# Path to the zipped file\nzipped_file = \"ADMIN-EXPRESS-COG-CARTO_3-1__SHP_WGS84G_FRA_2022-04-15.7z\"\n\n# Get the size of the zipped file in bytes\nzipped_size = os.path.getsize(zipped_file)\n\n# Path to the directory containing unzipped files\nunzipped_dir = \"./extracted_files\"\n\nroot_directory = Path(unzipped_dir)\nsize_dir = sum(f.stat().st_size for f in root_directory.glob('**/*') if f.is_file())\n\npoids_archive_compressee = convert_size(zipped_size)\npoids_archive_decompressee = convert_size(size_dir)\n\n\n\n\nEvaluation de la taille des m√™mes donn√©es issues de cartiflette\nwritedir = \"cartiflette-data/usecase1\"\nos.makedirs(writedir, exist_ok=True)\ncontours_villes_arrt.to_file(\n    f\"{writedir}/contours.shp\"\n1)\n\npoids_archive_cartiflette_bytes = os.path.getsize(f\"{writedir}/contours.shp\")\npoids_archive_cartiflette = convert_size(\n    poids_archive_cartiflette_bytes\n)\n\n\n\n1\n\nOn cr√©e un shapefile avec le GeoDataFrame obtenu depuis cartiflette afin d‚Äôavoir une comparaison honn√™te avec le fonds de carte issu du site de l‚ÄôIGN.\n\n\n\n\nLa premi√®re base de comparaison possible est la taille sur disque des fonds de carte r√©cup√©r√©s par cartiflette ou sans passer par ce package. Le code ci-dessus ‚òùÔ∏è permet de construire les statistiques suivantes:\n\nLes donn√©es cartiflette repr√©senteraient 182.23 KB si elles √©taient stock√©es sur disque.\nSans passer par cartiflette, on a besoin de 240.67 MB pour stocker les fonds de carte d√©compress√©s auxquels il faut ajouter 142.86 MB pour stocker l‚Äôarchive compress√©e.\n\nAutrement dit, les donn√©es r√©cup√©r√©es sans cartiflette repr√©sentent 2155 fois le volume de celles exclusivement n√©cessaires pour cette carte.\nL‚Äôarborescence du dossier d√©compress√© est √©galement assez cons√©quente: nous avons 68 fichiers. L‚Äôarborescence compl√®te obtenue sans cartiflette est disponible ci-dessous. Avec cartiflette aucun fichier n‚Äôest √©crit sur disque, tout est directement accessible dans la session Python.\n\n\nArborescence compl√®te\n\n\n\nextracted_files/\n‚îî‚îÄ‚îÄ ADMIN-EXPRESS-COG-CARTO_3-1__SHP_WGS84G_FRA_2022-04-15/\n    ‚îú‚îÄ‚îÄ ADMIN-EXPRESS-COG-CARTO/\n    ‚îÇ   ‚îú‚îÄ‚îÄ 1_DONNEES_LIVRAISON_2022-04-15/\n    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ADECOGC_3-1_SHP_WGS84G_FRA/\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ARRONDISSEMENT.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ARRONDISSEMENT.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ARRONDISSEMENT.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ARRONDISSEMENT.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ARRONDISSEMENT.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ARRONDISSEMENT_MUNICIPAL.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ARRONDISSEMENT_MUNICIPAL.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ARRONDISSEMENT_MUNICIPAL.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ARRONDISSEMENT_MUNICIPAL.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ARRONDISSEMENT_MUNICIPAL.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CANTON.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CANTON.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CANTON.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CANTON.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CANTON.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_ARRONDISSEMENT_MUNICIPAL.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_ARRONDISSEMENT_MUNICIPAL.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_ARRONDISSEMENT_MUNICIPAL.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_ARRONDISSEMENT_MUNICIPAL.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_ARRONDISSEMENT_MUNICIPAL.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_COMMUNE.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_COMMUNE.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_COMMUNE.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_COMMUNE.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_COMMUNE.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_COMMUNE_ASSOCIEE_OU_DELEGUEE.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_COMMUNE_ASSOCIEE_OU_DELEGUEE.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_COMMUNE_ASSOCIEE_OU_DELEGUEE.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_COMMUNE_ASSOCIEE_OU_DELEGUEE.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CHFLIEU_COMMUNE_ASSOCIEE_OU_DELEGUEE.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COLLECTIVITE_TERRITORIALE.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COLLECTIVITE_TERRITORIALE.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COLLECTIVITE_TERRITORIALE.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COLLECTIVITE_TERRITORIALE.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COLLECTIVITE_TERRITORIALE.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COMMUNE.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COMMUNE.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COMMUNE.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COMMUNE.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COMMUNE.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COMMUNE_ASSOCIEE_OU_DELEGUEE.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COMMUNE_ASSOCIEE_OU_DELEGUEE.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COMMUNE_ASSOCIEE_OU_DELEGUEE.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COMMUNE_ASSOCIEE_OU_DELEGUEE.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ COMMUNE_ASSOCIEE_OU_DELEGUEE.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DEPARTEMENT.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DEPARTEMENT.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DEPARTEMENT.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DEPARTEMENT.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DEPARTEMENT.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EPCI.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EPCI.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EPCI.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EPCI.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EPCI.shx\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ REGION.cpg\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ REGION.dbf\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ REGION.prj\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ REGION.shp\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ REGION.shx\n    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ADECOGC_3-1_SHP_WGS84G_FRA.md5\n    ‚îÇ   ‚îú‚îÄ‚îÄ 1_DONNEES_LIVRAISON_2022-04-15.md5\n    ‚îÇ   ‚îú‚îÄ‚îÄ 2_METADONNEES_LIVRAISON_2022-04-15/\n    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ADECOGC_3-1_SHP_WGS84G_FRA/\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ IGNF_ADECOGC_3-1_SHP_WGS84G_FRA.html\n    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ IGNF_ADECOGC_3-1_SHP_WGS84G_FRA.xml\n    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ADECOGC_3-1_SHP_WGS84G_FRA.md5\n    ‚îÇ   ‚îú‚îÄ‚îÄ 2_METADONNEES_LIVRAISON_2022-04-15.md5\n    ‚îÇ   ‚îî‚îÄ‚îÄ LISEZ-MOI.pdf\n    ‚îî‚îÄ‚îÄ ADMIN-EXPRESS-COG-CARTO.md5"
  },
  {
    "objectID": "use-case/usecase1.html#nombre-de-lignes-de-code",
    "href": "use-case/usecase1.html#nombre-de-lignes-de-code",
    "title": "Associer des arrondissements √† des donn√©es communales avec cartiflette",
    "section": "4.2 Nombre de lignes de code",
    "text": "4.2 Nombre de lignes de code\n\nmd`La r√©cup√©ration des donn√©es avec \\`cartiflette\\` ne demande que __${nlines_cartiflette} lignes de code__ contre __${nlines_no_cartiflette} sans \\`cartiflette\\`__`\n\n\n\n\n\n\n\nnlines_no_cartiflette = d3.sum(nrows_no_cartiflette)\n\n\n\n\n\n\n\nnlines_cartiflette = d3.sum(nrows_cartiflette)\n\n\n\n\n\n\nEn ce qui concerne le temps de d√©veloppement de ce code, on est sur quelques secondes pour le code avec cartiflette en utilisant la documentation interactive d‚Äôexemples contre plusieurs dizaines de minutes pour le code sans cartiflette."
  },
  {
    "objectID": "use-case/usecase1.html#temps-de-traitement",
    "href": "use-case/usecase1.html#temps-de-traitement",
    "title": "Associer des arrondissements √† des donn√©es communales avec cartiflette",
    "section": "4.3 Temps de traitement",
    "text": "4.3 Temps de traitement\nLe code cartiflette permet de r√©cup√©rer les √©l√©ments contextuels n√©cessaires en 6 secondes. Sans cartiflette, il faut 3minutes et 43 secondes. Sans cartiflette, soit un rapport de 1 √† 33 pour cette t√¢che.\n\n\nlabels = [\n    'lst-example-download-adminexpress',\n    'lst-example-unzip-adminexpress',\n    'lst-example-open-adminexpress',\n    'lst-example-merge-adminexpres'\n]\nlabels_cartiflette = [\n    'lst-cartiflette-example'\n]\n\nfunction extractLineNumbers(label) {\n    const selector = `[aria-describedby^=\"${label}\"]`;\n    const blocks = document.querySelectorAll(selector);\n\n    let lineNumbers = [];\n\n    blocks.forEach(block =&gt; {\n        // Search for ids matching \"annotated-cell-XX-N\"\n        const annotatedCells = block.querySelectorAll('[id^=\"annotated-cell-\"]');\n        annotatedCells.forEach(cell =&gt; {\n            const match = cell.id.match(/annotated-cell-\\d+-(\\d+)/);\n            if (match) {\n                lineNumbers.push(parseInt(match[1], 10));\n            }\n        });\n\n        // Search for ids matching \"cbXX-N\"\n        const cbCells = block.querySelectorAll('[id^=\"cb\"]');\n        cbCells.forEach(cell =&gt; {\n            const match = cell.id.match(/cb\\d+-(\\d+)/);\n            if (match) {\n                lineNumbers.push(parseInt(match[1], 10));\n            }\n        });\n    });\n\n    return lineNumbers;\n}\n\nfunction getMaxLineNumber(label) {\n    const lineNumbers = extractLineNumbers(label);\n    return Math.max(...lineNumbers);\n}\n\n// Iterate over labels to get max line numbers\nnrows_no_cartiflette = labels.map(label =&gt; {\n    const maxLineNumber = getMaxLineNumber(label);\n    return maxLineNumber;\n})\n\nnrows_cartiflette = labels_cartiflette.map(label =&gt; {\n    const maxLineNumber = getMaxLineNumber(label);\n    return maxLineNumber;\n})"
  },
  {
    "objectID": "use-case/usecase1.html#footnotes",
    "href": "use-case/usecase1.html#footnotes",
    "title": "Associer des arrondissements √† des donn√©es communales avec cartiflette",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nLe syst√®me de coordonn√©es WGS84 (World Geodetic System 1984) est un syst√®me de r√©f√©rence g√©od√©sique utilis√© pour repr√©senter les positions g√©ographiques sur la Terre. Ce syst√®me est utilis√© par la plupart des applications GPS et des fournisseurs de tuiles vectorielles comme OpenStreetMap.‚Ü©Ô∏é\nLa variable INSEE_COM correspond au code officiel g√©ographique au niveau communal. La valeur est donc identique pour les 20 arrondissements parisiens.‚Ü©Ô∏é"
  },
  {
    "objectID": "use-case/index.html",
    "href": "use-case/index.html",
    "title": "Galerie d‚Äôexemples Python",
    "section": "",
    "text": "Important\n\n\n\nCette section est un work in progress!\n\n\nLes exemples dans d‚Äôautres langages arriveront prochainement\n\nR√©cup√©ration de donn√©es consolid√©es ville/arrondissement"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Les deux principaux objectifs de cartiflette:\n\nfaciliter et normaliser la r√©cup√©ration de fonds de carte officiels pour simplifier le travail des cartographes qui d√©sirent associer leurs donn√©es √† des fonds de carte administratifs ;\nenrichir les fonds de carte officiels pour limiter les pr√©parations de donn√©es √† la charge des cartographes.\n\nLe projet a √©t√© initi√© dans le cadre du Programme interminist√©riel 10% qui vise √† favoriser les √©changes entre data scientists de l‚Äôadministration fran√ßaise.\nPlus de d√©tails √† venir"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Documentation projet cartiflette üßÄ",
    "section": "",
    "text": "data_france = get_france(selectedlevel, \"topojson\", year, drom_rapproches, simplification_percent)\n\n\n\n\n\n\n\nbutton_france = html`\n  ${download_button(\n    create_url_france(selectedlevel, format, year, drom_rapproches, simplification_percent)\n  )}\n`\n\n\n\n\n\n\n\nbutton_departements = html`\n  ${download_button(\n    create_url_departement(selected_departements, selectedlevel, format, year, simplification_percent)\n  )}\n`\n\n\n\n\n\n\n\ndepartement_shape = get_departement(\n      departement,\n      arrondissement ? \"COMMUNE_ARRONDISSEMENT\" : \"COMMUNE\",\n      \"topojson\",\n      year\n    )\n\n\n\n\n\n\n\n\ndata_multiple_departement_combined = {\n    if (selected_departements.length == 1){\n        return data_multiple_departement\n    }\n    return mergeGeoJSONs(data_multiple_departement)\n}\n\n\n\n\n\n\n\nmap_multiple_departement = topohelper.fromGeojson(\n    data_multiple_departement_combined,\n    {deep: true}\n    )\n    .project({ proj: l93 })\n    .view({\n        tooltip: true,\n        zoom: true,\n        size: [\n            availableWidth &gt; smallScreen ? availableWidth*0.4 : availableWidth*0.95, availableHeight * 0.6\n    ]})\n\n\n\n\n\n\n\ndata_multiple_departement = {\n\n    let topos ;\n    \n    if (selected_departements.length == 1){\n        topos = get_departement(\n            selected_departements,\n            arrondissement ? \"COMMUNE_ARRONDISSEMENT\" : \"COMMUNE\",\n            \"geojson\",\n            year,\n            simplification_percent\n        )\n        return topos\n    }\n\n    topos = get_multiple_departement(\n            selected_departements,\n            arrondissement ? \"COMMUNE_ARRONDISSEMENT\" : \"COMMUNE\",\n            \"geojson\",\n            year,\n            simplification_percent\n        )\n    \n    return topos\n}\n\n\n\n\n\n\n\n// Function to merge multiple GeoJSON FeatureCollections\nfunction mergeGeoJSONs(geojsonList) {\n    // Initialize an empty FeatureCollection\n    const mergedGeoJSON = {\n        type: \"FeatureCollection\",\n        features: []\n    };\n\n    // Loop through all GeoJSON objects in the list\n    geojsonList.forEach(geojson =&gt; {\n        if (geojson.type === \"Feature\") {\n            // If it's a Feature, add directly to the features array\n            mergedGeoJSON.features.push(geojson);\n        } else if (geojson.type === \"FeatureCollection\") {\n            // If it's a FeatureCollection, add all its features to the features array\n            mergedGeoJSON.features = mergedGeoJSON.features.concat(geojson.features);\n        }\n    });\n\n    return mergedGeoJSON;\n}\n\n\n\n\n\n\n\navailableHeight = window.innerHeight\nscreenHeight = 0.9*(availableHeight - document.getElementById(\"quarto-header\").offsetHeight)\navailableWidth = window.innerWidth\nmapWidth = (width &gt; 400) ? 0.4*width : 0.95*width \nmapHeight = (width &gt; 400) ? 0.85*screenHeight : 0.5*screenHeight\nsmallScreen = 500\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Projection Lambert 93 (EPSG: 2154)\nl93 = \"+proj=lcc +lat_0=46.5 +lon_0=3 +lat_1=49 +lat_2=44 +x_0=700000 +y_0=6600000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs +type=crs\"\n\n\n\n\n\n\n\ntopohelper = import(\"https://cdn.jsdelivr.net/npm/topohelper@0.4.3/+esm\")\n\n\n\n\n\n\n\n\nimport {download_vectorfile} from \"@linogaliana/cartiflette-js\"\n\n\n\n\n\n\n\nimport {\n  button, url_file_available,\n  get_france, get_departement, liste_departements,\n  get_multiple_departement, create_url_departement, create_url_france,\n  to_single_geojson} from \"@linogaliana/cartiflette-js\"\n\n\n\n\n\n\n\nimport {create_projection2154, map_multiple_2154, map_multiple_4326, make_map, print_program_departement_single} from \"@linogaliana/cartiflette-doc-utils\"\n\n\n\n\n\n\n\nfunction download_button(url) {\n  return `\n    &lt;form method=\"get\" action=\"${url}\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;\n      &lt;button class=\"btn btn-download\" type=\"submit\"&gt;\n        &lt;i class=\"fa-solid fa-download\"&gt;&lt;/i&gt; Download !\n      &lt;/button&gt;\n    &lt;/form&gt;\n  `;\n}\n\n\n\n\n\n\n\nimport {multiAutoSelect} from \"@linogaliana/multi-auto-select\"\n\n\n\n\n\n\n\nviewof year = Inputs.select([\"2022\",], {label: \"Ann√©e de la g√©ographie de r√©f√©rence\"})\n\n\n\n\n\n\n\nviewof drom_rapproches = Inputs.toggle({label: \"Rapprocher les DROM ?\", value: true})\n\n\n\n\n\n\n\nviewof selectedlevel = Inputs.select(['DEPARTEMENT', 'REGION', 'BASSIN_VIE', 'AIRE_ATTRACTION_VILLES'], {label: \"Zonage d√©sir√©:\"})\n\n\n\n\n\n\n\nviewof format = Inputs.select(\n  [\"topojson\", \"geojson\"],\n  {label: \"Format d√©sir√©:\"})\n\n\n\n\n\n\n\nviewof simplification_percent = Inputs.range([0, 50], {step: 50, value: 50, label: \"Degr√© de simplification (%)\"})\n\n\n\n\n\n\n\n\nviewof arrondissement = Inputs.toggle({label: \"Arrondissement dans les grandes villes ?\", value: true})\nlevel_arrondissement = arrondissement ? \"COMMUNE_ARRONDISSEMENT\" : \"COMMUNE\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nviewof departement = Inputs.select(liste_departements, {label: \"D√©partement √† repr√©senter\"})\n\n\n\n\n\n\n\nviewof simplification_percent_departement = Inputs.bind(\n  Inputs.range([0, 50], {step: 50, value: 50, label: \"Degr√© de simplification (%)\"}),\n  viewof simplification_percent\n  )\n\n\n\n\n\n\n\nviewof langage_requete = Inputs.radio(\n  [\"Python\", \"Javascript\" ,\"R\"], {label: \"Langage de programmation pour les exemples de code\"},\n  {value: null, format: x =&gt; x ?? \"Python\"}\n)\n\n\n\n\n\n\n\nviewof langage_requete_departements = Inputs.radio(\n  [\"Python\", \"Javascript\" ,\"R\"], {label: \"Langage de programmation pour les exemples de code\"},\n  {value: null, format: x =&gt; x ?? \"Python\"}\n)\n\n\n\n\n\n\n\n\nviewof selected_departements = multiAutoSelect({\n    options: liste_departements,\n    placeholder: \"Liste des d√©partements\",\n    value: [\"75\", \"92\", \"93\", \"94\"]\n})\n\n\n\n\n\n\n\nlanguage_emprise = Inputs.bind(\n    Inputs.radio(\n        [\"Python\", \"Javascript\" ,\"R\"], {label: \"Langage de programmation pour les exemples de code\"},\n        {value: null, format: x =&gt; x ?? \"Python\"}\n    ),\n    viewof langage_requete\n)\n\n\n\n\n\n\n\nlanguage_emprise_departements = Inputs.bind(\n    Inputs.radio(\n        [\"Python\", \"Javascript\" ,\"R\"], {label: \"Langage de programmation pour les exemples de code\"},\n        {value: null, format: x =&gt; x ?? \"Python\"}\n    ),\n    viewof langage_requete_departements\n)\n\n\n\n\n\n\n\nyear_emprise = Inputs.bind(\n    Inputs.select(\n        [\"2022\",], {label: \"Ann√©e de la g√©ographie de r√©f√©rence\"}\n    ),\n    viewof year\n)\n\n\n\n\n\n\n\nformat_emprise = Inputs.bind(\n    Inputs.select(\n        [\"topojson\", \"geojson\"],{label: \"Format d√©sir√©:\"}\n    ),\n    viewof format\n)\n\n\n\n\n\n\n\nsimplification_percent_emprise = Inputs.bind(\n    Inputs.range(\n        [0, 50], {step: 50, value: 50, label: \"Degr√© de simplification (%)\"}\n    ),\n    viewof simplification_percent\n)\n\n\n\n\n\n\n\n\nlangage = langage_requete == null ? \"Python\" : langage_requete\n\n\n\n\n\n\n\nlangage_departements = langage_requete_departements == null ? \"Python\" : langage_requete_departements\n\n\n\n\n\n\n\nlogo = ({\n  \"python\": `${fab`python`}`,\n  \"javascript\": `${fab`js`}`,\n  \"r\": `${fab`r-project`}`\n})\n\n\n\n\n\n\n\nimport { style as faStyle, fa, fab, fas } from \"@airbornemint/fontawesome\"\n\n\n\n\n\n\n\n\n// Function to display the code bloc to use Cartiflette for whole France\nfunction print_program_france(langage, selectedlevel, format, year, rapproche_drom, simplification){\n    const filter_by = rapproche_drom ? \"FRANCE_ENTIERE_DROM_RAPPROCHES\" : \"FRANCE_ENTIERE\"\n    if (langage == \"Python\"){\n        return md`\n        from cartiflette import carti_download\n        shp_communes = carti_download(\n            values = [\"France\"],\n            crs = 4326,\n            borders = \"${selectedlevel}\",\n            vectorfile_format=\"${format}\",\n            simplification=${simplification},\n            filter_by=\"${filter_by}\",\n            source=\"EXPRESS-COG-CARTO-TERRITOIRE\",\n            year=${year})\n        `\n    } else{\n        return md`\n        import {carti_download} from \"@linogaliana/cartiflette-js\"\n        carti_download({\n            value: \"France\",\n            crs: 4326,\n            borders: \"${selectedlevel}\",\n            vectorfile_format: \"${format}\",\n            simplification=${simplification},\n            filter_by: ${filter_by}\",\n            source: \"EXPRESS-COG-CARTO-TERRITOIRE\",\n            year:${year}\n        })\n        `\n    }\n}\n\n\n\n\n\n\n\n\n\nhtml`&lt;div&gt;${grid}&lt;/div&gt;`\n\n\n\n\n\n\n\n\n\n\nhtml`&lt;div&gt;${grid_departements}&lt;/div&gt;`\n\n\n\n\n\n\n\ngrid_departements =  {\n    let grid ;\n\n    if (availableWidth&gt;smallScreen){\n        grid = html`\n        &lt;div style=\"\n            background: #fff;\n            margin: 0;\n            border: none;\n            display: grid;\n            width: ${availableWidth};\n            grid-template-areas: \n                'selectors_departements map_departements choice-code_departements'\n                '. map_departements code_departements'\n                '. map_departements .'\n                '. map_departements .'\n                'download_departements map_departements .';\n            grid-template-columns: 23% 45% 32%;\n            \"&gt;\n            \n            &lt;div name=\"selectors_departements\" style=\"grid-area: selectors_departements; position: relative;\"&gt;\n                ${viewof selected_departements}\n                ${year_emprise}\n                ${format_emprise}\n                ${simplification_percent_emprise}\n                ${viewof arrondissement}\n            &lt;/div&gt;\n            \n            &lt;div name=\"map_departements\" style=\"grid-area: map_departements; position: relative;\"&gt;\n                ${map_multiple_departement}\n            &lt;/div&gt;\n\n            &lt;div name=\"code-bloc-departement\" class=\"code-bloc\"&gt;\n                &lt;div name=\"choice-code_departements\" style=\"grid-area: choice-code_departements; position: relative;\"&gt;\n                    ${language_emprise_departements}\n                &lt;/div&gt;\n\n                &lt;div name=\"code_departements\" style=\"grid-area: code_departements; position: relative;\" class=\"code\"&gt;\n                    &lt;span class=\"code-bloc-title\"&gt;\n                        Comment faire en &lt;code&gt;${langage_departements}&lt;/code&gt; ${logo[langage_departements.toLowerCase()]}\n                    &lt;/span&gt; \n                    ${print_program_departement_single(langage_departements, selected_departements, selectedlevel, format, year)}\n                &lt;/div&gt;\n            &lt;/div&gt;\n\n            &lt;div name=\"download-button_departements\" style=\"grid-area: download_departements; position: relative;\"&gt;\n                ${button_departements}\n            &lt;/div&gt;\n\n        &lt;/div&gt;\n        `\n        return grid\n    }\n\n    grid = html`\n    &lt;div style=\"\n        background: #fff;\n        margin: 0;\n        border: none;\n        display: grid;\n        width: ${availableWidth};\n        grid-template-areas: \n            'selectors_departements'\n            'map_departements'\n            'download_departements'\n            'choice-code_departements'\n            'code_departements';\n        grid-template-rows: auto auto auto auto auto;\n        grid-gap: 10px;\n        \"&gt;\n\n        &lt;div name=\"selectors_departements\" style=\"grid-area: selectors_departements; position: relative;\"&gt;\n                ${viewof selected_departements}\n                ${year_emprise}\n                ${format_emprise}\n                ${simplification_percent_emprise}\n                ${viewof arrondissement}\n        &lt;/div&gt;\n        \n        &lt;div name=\"map_departements\" style=\"grid-area: map_departements; position: relative;\"&gt;\n            ${map_multiple_departement}\n        &lt;/div&gt;\n\n        &lt;div name=\"download-button_departements\" style=\"grid-area: download_departements; position: relative;\"&gt;\n            ${button_departements}\n        &lt;/div&gt;\n\n        &lt;div name=\"code-bloc-departement\" class=\"code-bloc\"&gt;\n            &lt;div name=\"choice-code_departements\" style=\"grid-area: choice-code_departements; position: relative;\"&gt;\n                ${language_emprise_departements}\n            &lt;/div&gt;\n\n            &lt;div name=\"code_departements\" style=\"grid-area: code_departements; position: relative;\" class=\"code\"&gt;\n                &lt;span class=\"code-bloc-title\"&gt;\n                    Comment faire en &lt;code&gt;${langage_departements}&lt;/code&gt; ${logo[langage_departements.toLowerCase()]}\n                &lt;/span&gt;\n                ${print_program_departement_single(langage_departements, selected_departements, selectedlevel, format, year)}\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n    &lt;/div&gt;\n    `\n\n    return grid\n}\n\n\n\n\n\n\n\n\n// Source: https://observablehq.com/@mbostock/dashboard\ngrid = {\n\n    let grid ;\n\n    if (availableWidth&gt;smallScreen){\n        grid = html`\n        &lt;div class=\"cartiflette-example\" style=\"\n            background: #fff;\n            margin: 0;\n            border: none;\n            display: grid;\n            width: ${availableWidth};\n            grid-template-areas: \n                'selectors map choice-code'\n                '. map code'\n                '. map .'\n                '. map .'\n                'download map .';\n            grid-template-columns: 23% 45% 32%;\n            \"&gt;\n            \n            &lt;div name=\"selectors\" style=\"grid-area: selectors; position: relative;\"&gt;\n                ${viewof year}\n                ${viewof selectedlevel}\n                ${viewof format}\n                ${viewof simplification_percent}\n                ${viewof drom_rapproches}\n            &lt;/div&gt;\n            \n            &lt;div name=\"map\" style=\"grid-area: map; position: relative;\"&gt;\n                ${map_france}\n            &lt;/div&gt;\n\n            &lt;div name=\"code-bloc\" class=\"code-bloc\"&gt;\n                &lt;div name=\"choice-code\" style=\"grid-area: choice-code; position: relative;\"&gt;\n                    ${viewof langage_requete}\n                &lt;/div&gt;\n\n                &lt;div name=\"code\" style=\"grid-area: code; position: relative;\" class=\"code\"&gt;\n                    &lt;span class=\"code-bloc-title\"&gt;\n                        Comment faire en &lt;code&gt;${langage}&lt;/code&gt; ${logo[langage.toLowerCase()]}\n                    &lt;/span&gt;\n                    ${print_program_france(langage, selectedlevel, format, year, drom_rapproches, simplification_percent)}\n                &lt;/div&gt;\n            &lt;/div&gt;\n\n            &lt;div name=\"download-button\" style=\"grid-area: download; position: relative;\"&gt;\n                ${button_france}\n            &lt;/div&gt;\n\n        &lt;/div&gt;\n        `\n        return grid\n    }\n\n    grid = html`\n    &lt;div class=\"cartiflette-example\" style=\"\n        background: #fff;\n        margin: 0;\n        border: none;\n        display: grid;\n        width: ${availableWidth};\n        grid-template-areas: \n            'selectors'\n            'map'\n            'download'\n            'choice-code'\n            'code';\n        grid-template-rows: auto auto auto auto auto;\n        grid-gap: 10px;\n        \"&gt;\n\n        &lt;div name=\"selectors\" style=\"grid-area: selectors; position: relative;\"&gt;\n            ${viewof year}\n            ${viewof selectedlevel}\n            ${viewof format}\n            ${viewof simplification_percent}\n            ${viewof drom_rapproches}\n        &lt;/div&gt;\n        \n        &lt;div name=\"map\" style=\"grid-area: map; position: relative;\"&gt;\n            ${map_france}\n        &lt;/div&gt;\n\n        &lt;div name=\"download-button\" style=\"grid-area: download; position: relative;\"&gt;\n            ${button_france}\n        &lt;/div&gt;\n\n        &lt;div name=\"code-bloc\" class=\"code-bloc\"&gt;\n            &lt;div name=\"choice-code\" style=\"grid-area: choice-code; position: relative;\"&gt;\n                ${viewof langage_requete}\n            &lt;/div&gt;\n\n            &lt;div name=\"code\" style=\"grid-area: code; position: relative;\" class=\"code\"&gt;\n                &lt;span class=\"code-bloc-title\"&gt;\n                    Comment faire en &lt;code&gt;${langage}&lt;/code&gt; ${logo[langage.toLowerCase()]}\n                &lt;/span&gt;\n                ${print_program_france(langage, selectedlevel, format, year, drom_rapproches, simplification_percent)}\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n    &lt;/div&gt;\n    `\n    return grid\n}\n\n\n\n\n\n\n\nmap_france = topohelper\n  .from(\n    await data_france\n  )\n  .project({ proj: l93 })\n  .view({\n    tooltip: true,\n    zoom: true,\n    size: [\n        availableWidth &gt; smallScreen ? availableWidth*0.4 : availableWidth*0.95, availableHeight * 0.6\n    ]})"
  },
  {
    "objectID": "index.html#r√©cup√©rer-un-fond-de-carte-france-enti√®re",
    "href": "index.html#r√©cup√©rer-un-fond-de-carte-france-enti√®re",
    "title": "Documentation projet cartiflette üßÄ",
    "section": "",
    "text": "html`&lt;div&gt;${grid}&lt;/div&gt;`"
  },
  {
    "objectID": "index.html#r√©cup√©rer-un-fond-de-carte-sur-une-emprise-limit√©e",
    "href": "index.html#r√©cup√©rer-un-fond-de-carte-sur-une-emprise-limit√©e",
    "title": "Documentation projet cartiflette üßÄ",
    "section": "",
    "text": "html`&lt;div&gt;${grid_departements}&lt;/div&gt;`\n\n\n\n\n\n\n\ngrid_departements =  {\n    let grid ;\n\n    if (availableWidth&gt;smallScreen){\n        grid = html`\n        &lt;div style=\"\n            background: #fff;\n            margin: 0;\n            border: none;\n            display: grid;\n            width: ${availableWidth};\n            grid-template-areas: \n                'selectors_departements map_departements choice-code_departements'\n                '. map_departements code_departements'\n                '. map_departements .'\n                '. map_departements .'\n                'download_departements map_departements .';\n            grid-template-columns: 23% 45% 32%;\n            \"&gt;\n            \n            &lt;div name=\"selectors_departements\" style=\"grid-area: selectors_departements; position: relative;\"&gt;\n                ${viewof selected_departements}\n                ${year_emprise}\n                ${format_emprise}\n                ${simplification_percent_emprise}\n                ${viewof arrondissement}\n            &lt;/div&gt;\n            \n            &lt;div name=\"map_departements\" style=\"grid-area: map_departements; position: relative;\"&gt;\n                ${map_multiple_departement}\n            &lt;/div&gt;\n\n            &lt;div name=\"code-bloc-departement\" class=\"code-bloc\"&gt;\n                &lt;div name=\"choice-code_departements\" style=\"grid-area: choice-code_departements; position: relative;\"&gt;\n                    ${language_emprise_departements}\n                &lt;/div&gt;\n\n                &lt;div name=\"code_departements\" style=\"grid-area: code_departements; position: relative;\" class=\"code\"&gt;\n                    &lt;span class=\"code-bloc-title\"&gt;\n                        Comment faire en &lt;code&gt;${langage_departements}&lt;/code&gt; ${logo[langage_departements.toLowerCase()]}\n                    &lt;/span&gt; \n                    ${print_program_departement_single(langage_departements, selected_departements, selectedlevel, format, year)}\n                &lt;/div&gt;\n            &lt;/div&gt;\n\n            &lt;div name=\"download-button_departements\" style=\"grid-area: download_departements; position: relative;\"&gt;\n                ${button_departements}\n            &lt;/div&gt;\n\n        &lt;/div&gt;\n        `\n        return grid\n    }\n\n    grid = html`\n    &lt;div style=\"\n        background: #fff;\n        margin: 0;\n        border: none;\n        display: grid;\n        width: ${availableWidth};\n        grid-template-areas: \n            'selectors_departements'\n            'map_departements'\n            'download_departements'\n            'choice-code_departements'\n            'code_departements';\n        grid-template-rows: auto auto auto auto auto;\n        grid-gap: 10px;\n        \"&gt;\n\n        &lt;div name=\"selectors_departements\" style=\"grid-area: selectors_departements; position: relative;\"&gt;\n                ${viewof selected_departements}\n                ${year_emprise}\n                ${format_emprise}\n                ${simplification_percent_emprise}\n                ${viewof arrondissement}\n        &lt;/div&gt;\n        \n        &lt;div name=\"map_departements\" style=\"grid-area: map_departements; position: relative;\"&gt;\n            ${map_multiple_departement}\n        &lt;/div&gt;\n\n        &lt;div name=\"download-button_departements\" style=\"grid-area: download_departements; position: relative;\"&gt;\n            ${button_departements}\n        &lt;/div&gt;\n\n        &lt;div name=\"code-bloc-departement\" class=\"code-bloc\"&gt;\n            &lt;div name=\"choice-code_departements\" style=\"grid-area: choice-code_departements; position: relative;\"&gt;\n                ${language_emprise_departements}\n            &lt;/div&gt;\n\n            &lt;div name=\"code_departements\" style=\"grid-area: code_departements; position: relative;\" class=\"code\"&gt;\n                &lt;span class=\"code-bloc-title\"&gt;\n                    Comment faire en &lt;code&gt;${langage_departements}&lt;/code&gt; ${logo[langage_departements.toLowerCase()]}\n                &lt;/span&gt;\n                ${print_program_departement_single(langage_departements, selected_departements, selectedlevel, format, year)}\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n    &lt;/div&gt;\n    `\n\n    return grid\n}\n\n\n\n\n\n\n\n\n// Source: https://observablehq.com/@mbostock/dashboard\ngrid = {\n\n    let grid ;\n\n    if (availableWidth&gt;smallScreen){\n        grid = html`\n        &lt;div class=\"cartiflette-example\" style=\"\n            background: #fff;\n            margin: 0;\n            border: none;\n            display: grid;\n            width: ${availableWidth};\n            grid-template-areas: \n                'selectors map choice-code'\n                '. map code'\n                '. map .'\n                '. map .'\n                'download map .';\n            grid-template-columns: 23% 45% 32%;\n            \"&gt;\n            \n            &lt;div name=\"selectors\" style=\"grid-area: selectors; position: relative;\"&gt;\n                ${viewof year}\n                ${viewof selectedlevel}\n                ${viewof format}\n                ${viewof simplification_percent}\n                ${viewof drom_rapproches}\n            &lt;/div&gt;\n            \n            &lt;div name=\"map\" style=\"grid-area: map; position: relative;\"&gt;\n                ${map_france}\n            &lt;/div&gt;\n\n            &lt;div name=\"code-bloc\" class=\"code-bloc\"&gt;\n                &lt;div name=\"choice-code\" style=\"grid-area: choice-code; position: relative;\"&gt;\n                    ${viewof langage_requete}\n                &lt;/div&gt;\n\n                &lt;div name=\"code\" style=\"grid-area: code; position: relative;\" class=\"code\"&gt;\n                    &lt;span class=\"code-bloc-title\"&gt;\n                        Comment faire en &lt;code&gt;${langage}&lt;/code&gt; ${logo[langage.toLowerCase()]}\n                    &lt;/span&gt;\n                    ${print_program_france(langage, selectedlevel, format, year, drom_rapproches, simplification_percent)}\n                &lt;/div&gt;\n            &lt;/div&gt;\n\n            &lt;div name=\"download-button\" style=\"grid-area: download; position: relative;\"&gt;\n                ${button_france}\n            &lt;/div&gt;\n\n        &lt;/div&gt;\n        `\n        return grid\n    }\n\n    grid = html`\n    &lt;div class=\"cartiflette-example\" style=\"\n        background: #fff;\n        margin: 0;\n        border: none;\n        display: grid;\n        width: ${availableWidth};\n        grid-template-areas: \n            'selectors'\n            'map'\n            'download'\n            'choice-code'\n            'code';\n        grid-template-rows: auto auto auto auto auto;\n        grid-gap: 10px;\n        \"&gt;\n\n        &lt;div name=\"selectors\" style=\"grid-area: selectors; position: relative;\"&gt;\n            ${viewof year}\n            ${viewof selectedlevel}\n            ${viewof format}\n            ${viewof simplification_percent}\n            ${viewof drom_rapproches}\n        &lt;/div&gt;\n        \n        &lt;div name=\"map\" style=\"grid-area: map; position: relative;\"&gt;\n            ${map_france}\n        &lt;/div&gt;\n\n        &lt;div name=\"download-button\" style=\"grid-area: download; position: relative;\"&gt;\n            ${button_france}\n        &lt;/div&gt;\n\n        &lt;div name=\"code-bloc\" class=\"code-bloc\"&gt;\n            &lt;div name=\"choice-code\" style=\"grid-area: choice-code; position: relative;\"&gt;\n                ${viewof langage_requete}\n            &lt;/div&gt;\n\n            &lt;div name=\"code\" style=\"grid-area: code; position: relative;\" class=\"code\"&gt;\n                &lt;span class=\"code-bloc-title\"&gt;\n                    Comment faire en &lt;code&gt;${langage}&lt;/code&gt; ${logo[langage.toLowerCase()]}\n                &lt;/span&gt;\n                ${print_program_france(langage, selectedlevel, format, year, drom_rapproches, simplification_percent)}\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n    &lt;/div&gt;\n    `\n    return grid\n}\n\n\n\n\n\n\n\nmap_france = topohelper\n  .from(\n    await data_france\n  )\n  .project({ proj: l93 })\n  .view({\n    tooltip: true,\n    zoom: true,\n    size: [\n        availableWidth &gt; smallScreen ? availableWidth*0.4 : availableWidth*0.95, availableHeight * 0.6\n    ]})"
  }
]