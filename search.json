[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Documentation projet cartiflette üßÄ",
    "section": "",
    "text": "data_france = get_france(selectedlevel, \"topojson\", year, drom_rapproches, simplification_percent)\nbutton_france = html`\n  ${download_button(\n    create_url_france(selectedlevel, format, year, drom_rapproches, simplification_percent)\n  )}\n`\nbutton_departements = html`\n  ${download_button(\n    create_url_departement(selected_departements, selectedlevel, format, year, simplification_percent)\n  )}\n`\ndepartement_shape = get_departement(\n      departement,\n      arrondissement ? \"COMMUNE_ARRONDISSEMENT\" : \"COMMUNE\",\n      \"topojson\",\n      year\n    )\ndata_multiple_departement_combined = {\n    if (selected_departements.length == 1){\n        return data_multiple_departement\n    }\n    return mergeGeoJSONs(data_multiple_departement)\n}\nmap_multiple_departement = topohelper.fromGeojson(\n    data_multiple_departement_combined,\n    {deep: true}\n    )\n    .project({ proj: l93 })\n    .view({\n        tooltip: true,\n        zoom: true,\n        size: [\n            availableWidth &gt; smallScreen ? availableWidth*0.4 : availableWidth*0.95, availableHeight * 0.6\n    ]})\ndata_multiple_departement = {\n\n    let topos ;\n    \n    if (selected_departements.length == 1){\n        topos = get_departement(\n            selected_departements,\n            arrondissement ? \"COMMUNE_ARRONDISSEMENT\" : \"COMMUNE\",\n            \"geojson\",\n            year,\n            simplification_percent\n        )\n        return topos\n    }\n\n    topos = get_multiple_departement(\n            selected_departements,\n            arrondissement ? \"COMMUNE_ARRONDISSEMENT\" : \"COMMUNE\",\n            \"geojson\",\n            year,\n            simplification_percent\n        )\n    \n    return topos\n}\n// Function to merge multiple GeoJSON FeatureCollections\nfunction mergeGeoJSONs(geojsonList) {\n    // Initialize an empty FeatureCollection\n    const mergedGeoJSON = {\n        type: \"FeatureCollection\",\n        features: []\n    };\n\n    // Loop through all GeoJSON objects in the list\n    geojsonList.forEach(geojson =&gt; {\n        if (geojson.type === \"Feature\") {\n            // If it's a Feature, add directly to the features array\n            mergedGeoJSON.features.push(geojson);\n        } else if (geojson.type === \"FeatureCollection\") {\n            // If it's a FeatureCollection, add all its features to the features array\n            mergedGeoJSON.features = mergedGeoJSON.features.concat(geojson.features);\n        }\n    });\n\n    return mergedGeoJSON;\n}\navailableHeight = window.innerHeight\nscreenHeight = 0.9*(availableHeight - document.getElementById(\"quarto-header\").offsetHeight)\navailableWidth = window.innerWidth\nmapWidth = (width &gt; 400) ? 0.4*width : 0.95*width \nmapHeight = (width &gt; 400) ? 0.85*screenHeight : 0.5*screenHeight\nsmallScreen = 500\n// Projection Lambert 93 (EPSG: 2154)\nl93 = \"+proj=lcc +lat_0=46.5 +lon_0=3 +lat_1=49 +lat_2=44 +x_0=700000 +y_0=6600000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs +type=crs\"\ntopohelper = import(\"https://cdn.jsdelivr.net/npm/topohelper@0.4.3/+esm\")\nimport {download_vectorfile} from \"@linogaliana/cartiflette-js\"\nimport {\n  button, url_file_available,\n  get_france, get_departement, liste_departements,\n  get_multiple_departement, create_url_departement, create_url_france,\n  to_single_geojson} from \"@linogaliana/cartiflette-js\"\nimport {create_projection2154, map_multiple_2154, map_multiple_4326, make_map, print_program_departement_single} from \"@linogaliana/cartiflette-doc-utils\"\nfunction download_button(url) {\n  return `\n    &lt;form method=\"get\" action=\"${url}\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;\n      &lt;button class=\"btn btn-download\" type=\"submit\"&gt;\n        &lt;i class=\"fa-solid fa-download\"&gt;&lt;/i&gt; Download !\n      &lt;/button&gt;\n    &lt;/form&gt;\n  `;\n}\nimport {multiAutoSelect} from \"@linogaliana/multi-auto-select\"\nviewof year = Inputs.select([\"2022\",], {label: \"Ann√©e de la g√©ographie de r√©f√©rence\"})\nviewof drom_rapproches = Inputs.toggle({label: \"Rapprocher les DROM ?\", value: true})\nviewof selectedlevel = Inputs.select(['DEPARTEMENT', 'REGION', 'BASSIN_VIE', 'AIRE_ATTRACTION_VILLES'], {label: \"Zonage d√©sir√©:\"})\nviewof format = Inputs.select(\n  [\"topojson\", \"geojson\"],\n  {label: \"Format d√©sir√©:\"})\nviewof simplification_percent = Inputs.range([0, 50], {step: 50, value: 50, label: \"Degr√© de simplification (%)\"})\nviewof arrondissement = Inputs.toggle({label: \"Arrondissement dans les grandes villes ?\", value: true})\nlevel_arrondissement = arrondissement ? \"COMMUNE_ARRONDISSEMENT\" : \"COMMUNE\"\nviewof departement = Inputs.select(liste_departements, {label: \"D√©partement √† repr√©senter\"})\nviewof simplification_percent_departement = Inputs.bind(\n  Inputs.range([0, 50], {step: 50, value: 50, label: \"Degr√© de simplification (%)\"}),\n  viewof simplification_percent\n  )\nviewof langage_requete = Inputs.radio(\n  [\"Python\", \"Javascript\" ,\"R\"], {label: \"Langage de programmation pour les exemples de code\"},\n  {value: null, format: x =&gt; x ?? \"Python\"}\n)\nviewof langage_requete_departements = Inputs.radio(\n  [\"Python\", \"Javascript\" ,\"R\"], {label: \"Langage de programmation pour les exemples de code\"},\n  {value: null, format: x =&gt; x ?? \"Python\"}\n)\nviewof selected_departements = multiAutoSelect({\n    options: liste_departements,\n    placeholder: \"Liste des d√©partements\",\n    value: [\"75\", \"92\", \"93\", \"94\"]\n})\nlanguage_emprise = Inputs.bind(\n    Inputs.radio(\n        [\"Python\", \"Javascript\" ,\"R\"], {label: \"Langage de programmation pour les exemples de code\"},\n        {value: null, format: x =&gt; x ?? \"Python\"}\n    ),\n    viewof langage_requete\n)\nlanguage_emprise_departements = Inputs.bind(\n    Inputs.radio(\n        [\"Python\", \"Javascript\" ,\"R\"], {label: \"Langage de programmation pour les exemples de code\"},\n        {value: null, format: x =&gt; x ?? \"Python\"}\n    ),\n    viewof langage_requete_departements\n)\nyear_emprise = Inputs.bind(\n    Inputs.select(\n        [\"2022\",], {label: \"Ann√©e de la g√©ographie de r√©f√©rence\"}\n    ),\n    viewof year\n)\nformat_emprise = Inputs.bind(\n    Inputs.select(\n        [\"topojson\", \"geojson\"],{label: \"Format d√©sir√©:\"}\n    ),\n    viewof format\n)\nsimplification_percent_emprise = Inputs.bind(\n    Inputs.range(\n        [0, 50], {step: 50, value: 50, label: \"Degr√© de simplification (%)\"}\n    ),\n    viewof simplification_percent\n)\nlangage = langage_requete == null ? \"Python\" : langage_requete\nlangage_departements = langage_requete_departements == null ? \"Python\" : langage_requete_departements\nlogo = ({\n  \"python\": `${fab`python`}`,\n  \"javascript\": `${fab`js`}`,\n  \"r\": `${fab`r-project`}`\n})\nimport { style as faStyle, fa, fab, fas } from \"@airbornemint/fontawesome\"\n// Function to display the code bloc to use Cartiflette for whole France\nfunction print_program_france(langage, selectedlevel, format, year, rapproche_drom, simplification){\n    const filter_by = rapproche_drom ? \"FRANCE_ENTIERE_DROM_RAPPROCHES\" : \"FRANCE_ENTIERE\"\n    if (langage == \"Python\"){\n        return md`\n        from cartiflette import carti_download\n        shp_communes = carti_download(\n            values = [\"France\"],\n            crs = 4326,\n            borders = \"${selectedlevel}\",\n            vectorfile_format=\"${format}\",\n            simplification=${simplification},\n            filter_by=\"${filter_by}\",\n            source=\"EXPRESS-COG-CARTO-TERRITOIRE\",\n            year=${year})\n        `\n    } else{\n        return md`\n        import {carti_download} from \"@linogaliana/cartiflette-js\"\n        carti_download({\n            value: \"France\",\n            crs: 4326,\n            borders: \"${selectedlevel}\",\n            vectorfile_format: \"${format}\",\n            simplification=${simplification},\n            filter_by: ${filter_by}\",\n            source: \"EXPRESS-COG-CARTO-TERRITOIRE\",\n            year:${year}\n        })\n        `\n    }\n}"
  },
  {
    "objectID": "index.html#r√©cup√©rer-un-fond-de-carte-france-enti√®re",
    "href": "index.html#r√©cup√©rer-un-fond-de-carte-france-enti√®re",
    "title": "Documentation projet cartiflette üßÄ",
    "section": "R√©cup√©rer un fond de carte France enti√®re",
    "text": "R√©cup√©rer un fond de carte France enti√®re\n\nhtml`&lt;div&gt;${grid}&lt;/div&gt;`"
  },
  {
    "objectID": "index.html#r√©cup√©rer-un-fond-de-carte-sur-une-emprise-limit√©e",
    "href": "index.html#r√©cup√©rer-un-fond-de-carte-sur-une-emprise-limit√©e",
    "title": "Documentation projet cartiflette üßÄ",
    "section": "R√©cup√©rer un fond de carte sur une emprise limit√©e",
    "text": "R√©cup√©rer un fond de carte sur une emprise limit√©e\n\nhtml`&lt;div&gt;${grid_departements}&lt;/div&gt;`\n\n\n\n\n\n\n\ngrid_departements =  {\n    let grid ;\n\n    if (availableWidth&gt;smallScreen){\n        grid = html`\n        &lt;div style=\"\n            background: #fff;\n            margin: 0;\n            border: none;\n            display: grid;\n            width: ${availableWidth};\n            grid-template-areas: \n                'selectors_departements map_departements choice-code_departements'\n                '. map_departements code_departements'\n                '. map_departements .'\n                '. map_departements .'\n                'download_departements map_departements .';\n            grid-template-columns: 23% 45% 32%;\n            \"&gt;\n            \n            &lt;div name=\"selectors_departements\" style=\"grid-area: selectors_departements; position: relative;\"&gt;\n                ${viewof selected_departements}\n                ${year_emprise}\n                ${format_emprise}\n                ${simplification_percent_emprise}\n                ${viewof arrondissement}\n            &lt;/div&gt;\n            \n            &lt;div name=\"map_departements\" style=\"grid-area: map_departements; position: relative;\"&gt;\n                ${map_multiple_departement}\n            &lt;/div&gt;\n\n            &lt;div name=\"code-bloc-departement\" class=\"code-bloc\"&gt;\n                &lt;div name=\"choice-code_departements\" style=\"grid-area: choice-code_departements; position: relative;\"&gt;\n                    ${language_emprise_departements}\n                &lt;/div&gt;\n\n                &lt;div name=\"code_departements\" style=\"grid-area: code_departements; position: relative;\" class=\"code\"&gt;\n                    &lt;span class=\"code-bloc-title\"&gt;\n                        Comment faire en &lt;code&gt;${langage_departements}&lt;/code&gt; ${logo[langage_departements.toLowerCase()]}\n                    &lt;/span&gt; \n                    ${print_program_departement_single(langage_departements, selected_departements, selectedlevel, format, year)}\n                &lt;/div&gt;\n            &lt;/div&gt;\n\n            &lt;div name=\"download-button_departements\" style=\"grid-area: download_departements; position: relative;\"&gt;\n                ${button_departements}\n            &lt;/div&gt;\n\n        &lt;/div&gt;\n        `\n        return grid\n    }\n\n    grid = html`\n    &lt;div style=\"\n        background: #fff;\n        margin: 0;\n        border: none;\n        display: grid;\n        width: ${availableWidth};\n        grid-template-areas: \n            'selectors_departements'\n            'map_departements'\n            'download_departements'\n            'choice-code_departements'\n            'code_departements';\n        grid-template-rows: auto auto auto auto auto;\n        grid-gap: 10px;\n        \"&gt;\n\n        &lt;div name=\"selectors_departements\" style=\"grid-area: selectors_departements; position: relative;\"&gt;\n                ${viewof selected_departements}\n                ${year_emprise}\n                ${format_emprise}\n                ${simplification_percent_emprise}\n                ${viewof arrondissement}\n        &lt;/div&gt;\n        \n        &lt;div name=\"map_departements\" style=\"grid-area: map_departements; position: relative;\"&gt;\n            ${map_multiple_departement}\n        &lt;/div&gt;\n\n        &lt;div name=\"download-button_departements\" style=\"grid-area: download_departements; position: relative;\"&gt;\n            ${button_departements}\n        &lt;/div&gt;\n\n        &lt;div name=\"code-bloc-departement\" class=\"code-bloc\"&gt;\n            &lt;div name=\"choice-code_departements\" style=\"grid-area: choice-code_departements; position: relative;\"&gt;\n                ${language_emprise_departements}\n            &lt;/div&gt;\n\n            &lt;div name=\"code_departements\" style=\"grid-area: code_departements; position: relative;\" class=\"code\"&gt;\n                &lt;span class=\"code-bloc-title\"&gt;\n                    Comment faire en &lt;code&gt;${langage_departements}&lt;/code&gt; ${logo[langage_departements.toLowerCase()]}\n                &lt;/span&gt;\n                ${print_program_departement_single(langage_departements, selected_departements, selectedlevel, format, year)}\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n    &lt;/div&gt;\n    `\n\n    return grid\n}\n\n\n\n\n\n\n\n\n// Source: https://observablehq.com/@mbostock/dashboard\ngrid = {\n\n    let grid ;\n\n    if (availableWidth&gt;smallScreen){\n        grid = html`\n        &lt;div class=\"cartiflette-example\" style=\"\n            background: #fff;\n            margin: 0;\n            border: none;\n            display: grid;\n            width: ${availableWidth};\n            grid-template-areas: \n                'selectors map choice-code'\n                '. map code'\n                '. map .'\n                '. map .'\n                'download map .';\n            grid-template-columns: 23% 45% 32%;\n            \"&gt;\n            \n            &lt;div name=\"selectors\" style=\"grid-area: selectors; position: relative;\"&gt;\n                ${viewof year}\n                ${viewof selectedlevel}\n                ${viewof format}\n                ${viewof simplification_percent}\n                ${viewof drom_rapproches}\n            &lt;/div&gt;\n            \n            &lt;div name=\"map\" style=\"grid-area: map; position: relative;\"&gt;\n                ${map_france}\n            &lt;/div&gt;\n\n            &lt;div name=\"code-bloc\" class=\"code-bloc\"&gt;\n                &lt;div name=\"choice-code\" style=\"grid-area: choice-code; position: relative;\"&gt;\n                    ${viewof langage_requete}\n                &lt;/div&gt;\n\n                &lt;div name=\"code\" style=\"grid-area: code; position: relative;\" class=\"code\"&gt;\n                    &lt;span class=\"code-bloc-title\"&gt;\n                        Comment faire en &lt;code&gt;${langage}&lt;/code&gt; ${logo[langage.toLowerCase()]}\n                    &lt;/span&gt;\n                    ${print_program_france(langage, selectedlevel, format, year, drom_rapproches, simplification_percent)}\n                &lt;/div&gt;\n            &lt;/div&gt;\n\n            &lt;div name=\"download-button\" style=\"grid-area: download; position: relative;\"&gt;\n                ${button_france}\n            &lt;/div&gt;\n\n        &lt;/div&gt;\n        `\n        return grid\n    }\n\n    grid = html`\n    &lt;div class=\"cartiflette-example\" style=\"\n        background: #fff;\n        margin: 0;\n        border: none;\n        display: grid;\n        width: ${availableWidth};\n        grid-template-areas: \n            'selectors'\n            'map'\n            'download'\n            'choice-code'\n            'code';\n        grid-template-rows: auto auto auto auto auto;\n        grid-gap: 10px;\n        \"&gt;\n\n        &lt;div name=\"selectors\" style=\"grid-area: selectors; position: relative;\"&gt;\n            ${viewof year}\n            ${viewof selectedlevel}\n            ${viewof format}\n            ${viewof simplification_percent}\n            ${viewof drom_rapproches}\n        &lt;/div&gt;\n        \n        &lt;div name=\"map\" style=\"grid-area: map; position: relative;\"&gt;\n            ${map_france}\n        &lt;/div&gt;\n\n        &lt;div name=\"download-button\" style=\"grid-area: download; position: relative;\"&gt;\n            ${button_france}\n        &lt;/div&gt;\n\n        &lt;div name=\"code-bloc\" class=\"code-bloc\"&gt;\n            &lt;div name=\"choice-code\" style=\"grid-area: choice-code; position: relative;\"&gt;\n                ${viewof langage_requete}\n            &lt;/div&gt;\n\n            &lt;div name=\"code\" style=\"grid-area: code; position: relative;\" class=\"code\"&gt;\n                &lt;span class=\"code-bloc-title\"&gt;\n                    Comment faire en &lt;code&gt;${langage}&lt;/code&gt; ${logo[langage.toLowerCase()]}\n                &lt;/span&gt;\n                ${print_program_france(langage, selectedlevel, format, year, drom_rapproches, simplification_percent)}\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n    &lt;/div&gt;\n    `\n    return grid\n}\n\n\n\n\n\n\n\nmap_france = topohelper\n  .from(\n    await data_france\n  )\n  .project({ proj: l93 })\n  .view({\n    tooltip: true,\n    zoom: true,\n    size: [\n        availableWidth &gt; smallScreen ? availableWidth*0.4 : availableWidth*0.95, availableHeight * 0.6\n    ]})"
  },
  {
    "objectID": "use-case/index.html",
    "href": "use-case/index.html",
    "title": "Galerie d‚Äôexemples Python",
    "section": "",
    "text": "Les exemples dans d‚Äôautres langages arriveront prochainement\n\nR√©cup√©ration de donn√©es consolid√©es ville/arrondissement"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Les deux principaux objectifs de cartiflette:\n\nfaciliter et normaliser la r√©cup√©ration de fonds de carte officiels pour simplifier le travail des cartographes qui d√©sirent associer leurs donn√©es √† des fonds de carte administratifs ;\nenrichir les fonds de carte officiels pour limiter les pr√©parations de donn√©es √† la charge des cartographes.\n\nLe projet a √©t√© initi√© dans le cadre du Programme interminist√©riel 10% qui vise √† favoriser les √©changes entre data scientists de l‚Äôadministration fran√ßaise.\nPlus de d√©tails √† venir"
  },
  {
    "objectID": "use-case/usecase1.html",
    "href": "use-case/usecase1.html",
    "title": "Cas d‚Äôusage 1: cartographie",
    "section": "",
    "text": "Nombre de places velib par km2 pour chaque ville + arrondissement"
  },
  {
    "objectID": "use-case/usecase1.html#pr√©liminaire-r√©cup√©ration-des-localisations-des-stations",
    "href": "use-case/usecase1.html#pr√©liminaire-r√©cup√©ration-des-localisations-des-stations",
    "title": "Cas d‚Äôusage 1: cartographie",
    "section": "Pr√©liminaire: r√©cup√©ration des localisations des stations",
    "text": "Pr√©liminaire: r√©cup√©ration des localisations des stations\n\nimport geopandas as gpd\n\nvelib_data = \"https://opendata.paris.fr/explore/dataset/velib-emplacement-des-stations/download/?format=geojson&timezone=Europe/Berlin&lang=fr\"\nstations = gpd.read_file(velib_data)\nstations.head(2)\n\n\n\n\n\n\n\n\ncapacity\nname\nstationcode\ngeometry\n\n\n\n\n0\n17\nThouin - Cardinal Lemoine\n5016\nPOINT (2.34946 48.84505)\n\n\n1\n40\nJouffroy d'Abbans - Wagram\n17026\nPOINT (2.30113 48.88197)"
  },
  {
    "objectID": "use-case/usecase1.html#avec-cartiflette",
    "href": "use-case/usecase1.html#avec-cartiflette",
    "title": "Cas d‚Äôusage 1: cartographie",
    "section": "Avec cartiflette",
    "text": "Avec cartiflette\n\nfrom cartiflette import carti_download\nimport pandas as pd\n\n# 1. Fonds communaux\ncontours_villes_arrt = carti_download(\n    values = [\"75\", \"92\", \"93\", \"94\"],\n    crs = 4326,\n    borders=\"COMMUNE_ARRONDISSEMENT\",\n    vectorfile_format=\"geojson\",\n    filter_by=\"DEPARTEMENT\",\n    source=\"EXPRESS-COG-CARTO-TERRITOIRE\",\n    year=2022)\n\n\n# 2. D√©partements \ndepartements = contours_villes_arrt.dissolve(\"INSEE_DEP\")\n\n\nstations_info = gpd.sjoin(\n    stations, contours_villes_arrt, predicate=\"within\"\n)\n\n\ncomptes = (\n    stations_info\n    .groupby(\"INSEE_COG\")\n    .agg({\"capacity\": \"sum\"})\n    .reset_index()\n)\n\n\ncontours_villes_arrt[\"INSEE_COG\"] = contours_villes_arrt[\"INSEE_COG\"].astype(str)\ncomptes[\"INSEE_COG\"] = comptes[\"INSEE_COG\"].astype(str)\n\ncomptes_velib_by_city_arrt = contours_villes_arrt.merge(\n    comptes, how = \"inner\", on = \"INSEE_COG\"\n)\ncomptes_velib_by_city_arrt['densite'] = comptes_velib_by_city_arrt['capacity']\n\n\ndf_points = comptes_velib_by_city_arrt.copy()\n\ndf_points[\"markersize\"] = 12*df_points[\"densite\"].div(comptes_velib_by_city_arrt.to_crs(2154).area.div(10**6).sum())\n\nbins = [-float('inf'), 20, 100, 500, float('inf')]\nlabels = [\"Moins de 20\", \"Entre 20 et 100\", \"Entre 100 et 500\", \"Plus de 500\"]\n\ndf_points[\"markercolor\"] = pd.cut(df_points['densite'], bins=bins, labels=labels, right=True)\n\ndf_points[\"geometry\"] = df_points[\"geometry\"].centroid\n\n/tmp/ipykernel_2039/348888411.py:10: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  df_points[\"geometry\"] = df_points[\"geometry\"].centroid\n\n\n\nimport matplotlib.pyplot as plt\n\nax = comptes_velib_by_city_arrt.plot(\n    color=\"lightgray\", edgecolor=\"grey\", figsize=(7, 7), linewidth=0.4, alpha=0.3\n)\ndf_points.plot(\n    ax=ax,\n    column=\"markercolor\",\n    markersize=\"markersize\",\n    alpha=0.7,  # categorical=False,\n    legend=True,\n    legend_kwds={\"loc\": \"upper center\", \"ncol\": 2, \"bbox_to_anchor\": (0.5, 0.05)},\n    cmap=\"viridis\",\n)\ndepartements.boundary.plot(ax=ax, edgecolor=\"black\", alpha=0.3)\nax.axis(\"off\")\nax.set(title=\"Densit√© de population dans la petite couronne\")\nax.get_legend().set_title(\"Nombre de v√©lib par km¬≤\")\nplt.figtext(\n    0.3,\n    0.15,\n    \"Source: IGN - AdminExpress\",\n    wrap=True,\n    horizontalalignment=\"center\",\n    fontsize=8,\n    style=\"italic\",\n)\n\nText(0.3, 0.15, 'Source: IGN - AdminExpress')"
  }
]