<!----------------
Fonctions qui étaient importées depuis @linogaliana/cartiflette-doc-utils
et qu'on rappatrie ici pour plus de praticité
----------------->

```{ojs}
// Function to display the code bloc to use Cartiflette for whole France
function print_program_france(langage, selectedlevel, format, year, rapproche_drom, simplification) {
    const filter_by = rapproche_drom ? "FRANCE_ENTIERE_DROM_RAPPROCHES" : "FRANCE_ENTIERE";

    switch (langage) {
        case "Python":
            return md`
            from cartiflette import carti_download
            shp_communes = carti_download(
                values = ["France"],
                crs = 4326,
                borders = "${selectedlevel}",
                vectorfile_format="${format}",
                simplification=${simplification},
                filter_by="${filter_by}",
                source="EXPRESS-COG-CARTO-TERRITOIRE",
                year=${year})
            `;
        case "Javascript":
            return md`
            import {carti_download} from "@linogaliana/cartiflette-js"
            carti_download({
                value: "France",
                crs: 4326,
                borders: "${selectedlevel}",
                vectorfile_format: "${format}",
                simplification: ${simplification},
                filter_by: "${filter_by}",
                source: "EXPRESS-COG-CARTO-TERRITOIRE",
                year: ${year}
            });
            `;
        case "R":
            return md`
            library(cartiflette)
            shp_communes <- carti_download(
                values = c("France"),
                crs = 4326,
                borders = "${selectedlevel}",
                vectorfile_format = "${format}",
                simplification = ${simplification},
                filter_by = "${filter_by}",
                source = "EXPRESS-COG-CARTO-TERRITOIRE",
                year = ${year}
            )
            `;
        default:
            throw new Error("Unsupported language specified");
    }
}
```


```{ojs}
function print_program_departement_single(langage, value, selectedlevel, format, year) {
    switch (langage) {
        case "Python":
            return md`
            from cartiflette import carti_download
            shp_communes = carti_download(
                crs = 4326,
                values = ["${value.join('", "')}"],
                borders="${selectedlevel}",
                vectorfile_format="${format}",
                filter_by="DEPARTEMENT",
                source="EXPRESS-COG-CARTO-TERRITOIRE",
                year=${year})
            `;
        case "Javascript":
            return md`
            import {carti_download} from "@linogaliana/cartiflette-js"
            carti_download({
                values = ["${value.join('", "')}"],
                borders: "${selectedlevel}",
                vectorfileFormat: "${format}",
                year: ${year},
                crs: 4326,
                filter_by: "DEPARTEMENT",
                source: "EXPRESS-COG-CARTO-TERRITOIRE"
            });
            `;
        case "R":
            return md`
            library(cartiflette)
            shp_communes <- carti_download(
                crs = 4326,
                values = c("${value.join('", "')}"),
                borders = "${selectedlevel}",
                vectorfile_format = "${format}",
                filter_by = "DEPARTEMENT",
                source = "EXPRESS-COG-CARTO-TERRITOIRE",
                year = ${year}
            )
            `;
        default:
            throw new Error("Unsupported language specified");
    }
}
```


<!---------------------------------------------
Fonctions pour manipuler le tableau de métadonnées
---------------------------------------------->


```{ojs}
function annotateFields(x, annotationsSources) {
    // Extract the keys from the input object
    const fields = Object.keys(x[0]);

    // Create a new object with annotated values for each field
    const annotatedObject = {};
    fields.forEach(field => {
        annotatedObject[field] = annotateColumn(field, annotationsSources);
    });

    // Return an array where the first element is the annotated object and the second is the original object
    return [annotatedObject, ...x];
}
```



```{ojs}
function annotateColumn(columnName, annotationsSources) {

  const sourceData = annotationsSources.filter(d => d.variable == columnName)[0];
  const sourceSelected = sourceData['source'];
  const url = sourceData['url'];
  const annotation = sourceData['note'];

  // Generate the HTML with a colored footnote, and add an anchor tag to link to the source documentation
  return html`
    <span style="font-weight: bold;"><span style="background-color: #ffcc00; color: black; padding: 2px 5px; border-radius: 3px; cursor: pointer;">
    <a href="${url}" target="_blank" style="color: black; text-decoration: none;" title="${sourceSelected} - ${annotation}">
      ${annotation}
    </a>
  </span></span>
  `;
}
```
